// generated by rust-bindgen
// contains manual fixes
//
// DO NOT RE-GENERATE |
// No major API changes are expected in StormLib |
// thus it should be possible to just manually fix issues (if any)

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 33;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const __BITS_PER_LONG: u32 = 64;
pub const STATX_TYPE: u32 = 1;
pub const STATX_MODE: u32 = 2;
pub const STATX_NLINK: u32 = 4;
pub const STATX_UID: u32 = 8;
pub const STATX_GID: u32 = 16;
pub const STATX_ATIME: u32 = 32;
pub const STATX_MTIME: u32 = 64;
pub const STATX_CTIME: u32 = 128;
pub const STATX_INO: u32 = 256;
pub const STATX_SIZE: u32 = 512;
pub const STATX_BLOCKS: u32 = 1024;
pub const STATX_BASIC_STATS: u32 = 2047;
pub const STATX_BTIME: u32 = 2048;
pub const STATX_MNT_ID: u32 = 4096;
pub const STATX__RESERVED: u32 = 2147483648;
pub const STATX_ALL: u32 = 4095;
pub const STATX_ATTR_COMPRESSED: u32 = 4;
pub const STATX_ATTR_IMMUTABLE: u32 = 16;
pub const STATX_ATTR_APPEND: u32 = 32;
pub const STATX_ATTR_NODUMP: u32 = 64;
pub const STATX_ATTR_ENCRYPTED: u32 = 2048;
pub const STATX_ATTR_AUTOMOUNT: u32 = 4096;
pub const STATX_ATTR_MOUNT_ROOT: u32 = 8192;
pub const STATX_ATTR_VERITY: u32 = 1048576;
pub const STATX_ATTR_DAX: u32 = 2097152;
pub const __statx_timestamp_defined: u32 = 1;
pub const __statx_defined: u32 = 1;
pub const _SYS_MMAN_H: u32 = 1;
pub const MAP_32BIT: u32 = 64;
pub const MAP_GROWSDOWN: u32 = 256;
pub const MAP_DENYWRITE: u32 = 2048;
pub const MAP_EXECUTABLE: u32 = 4096;
pub const MAP_LOCKED: u32 = 8192;
pub const MAP_NORESERVE: u32 = 16384;
pub const MAP_POPULATE: u32 = 32768;
pub const MAP_NONBLOCK: u32 = 65536;
pub const MAP_STACK: u32 = 131072;
pub const MAP_HUGETLB: u32 = 262144;
pub const MAP_SYNC: u32 = 524288;
pub const MAP_FIXED_NOREPLACE: u32 = 1048576;
pub const PROT_READ: u32 = 1;
pub const PROT_WRITE: u32 = 2;
pub const PROT_EXEC: u32 = 4;
pub const PROT_NONE: u32 = 0;
pub const PROT_GROWSDOWN: u32 = 16777216;
pub const PROT_GROWSUP: u32 = 33554432;
pub const MAP_SHARED: u32 = 1;
pub const MAP_PRIVATE: u32 = 2;
pub const MAP_SHARED_VALIDATE: u32 = 3;
pub const MAP_TYPE: u32 = 15;
pub const MAP_FIXED: u32 = 16;
pub const MAP_FILE: u32 = 0;
pub const MAP_ANONYMOUS: u32 = 32;
pub const MAP_ANON: u32 = 32;
pub const MAP_HUGE_SHIFT: u32 = 26;
pub const MAP_HUGE_MASK: u32 = 63;
pub const MS_ASYNC: u32 = 1;
pub const MS_SYNC: u32 = 4;
pub const MS_INVALIDATE: u32 = 2;
pub const MADV_NORMAL: u32 = 0;
pub const MADV_RANDOM: u32 = 1;
pub const MADV_SEQUENTIAL: u32 = 2;
pub const MADV_WILLNEED: u32 = 3;
pub const MADV_DONTNEED: u32 = 4;
pub const MADV_FREE: u32 = 8;
pub const MADV_REMOVE: u32 = 9;
pub const MADV_DONTFORK: u32 = 10;
pub const MADV_DOFORK: u32 = 11;
pub const MADV_MERGEABLE: u32 = 12;
pub const MADV_UNMERGEABLE: u32 = 13;
pub const MADV_HUGEPAGE: u32 = 14;
pub const MADV_NOHUGEPAGE: u32 = 15;
pub const MADV_DONTDUMP: u32 = 16;
pub const MADV_DODUMP: u32 = 17;
pub const MADV_WIPEONFORK: u32 = 18;
pub const MADV_KEEPONFORK: u32 = 19;
pub const MADV_COLD: u32 = 20;
pub const MADV_PAGEOUT: u32 = 21;
pub const MADV_HWPOISON: u32 = 100;
pub const POSIX_MADV_NORMAL: u32 = 0;
pub const POSIX_MADV_RANDOM: u32 = 1;
pub const POSIX_MADV_SEQUENTIAL: u32 = 2;
pub const POSIX_MADV_WILLNEED: u32 = 3;
pub const POSIX_MADV_DONTNEED: u32 = 4;
pub const MCL_CURRENT: u32 = 1;
pub const MCL_FUTURE: u32 = 2;
pub const MCL_ONFAULT: u32 = 4;
pub const MREMAP_MAYMOVE: u32 = 1;
pub const MREMAP_FIXED: u32 = 2;
pub const MREMAP_DONTUNMAP: u32 = 4;
pub const MFD_CLOEXEC: u32 = 1;
pub const MFD_ALLOW_SEALING: u32 = 2;
pub const MFD_HUGETLB: u32 = 4;
pub const MLOCK_ONFAULT: u32 = 1;
pub const PKEY_DISABLE_ACCESS: u32 = 1;
pub const PKEY_DISABLE_WRITE: u32 = 2;
pub const _FCNTL_H: u32 = 1;
pub const __O_LARGEFILE: u32 = 0;
pub const F_GETLK64: u32 = 5;
pub const F_SETLK64: u32 = 6;
pub const F_SETLKW64: u32 = 7;
pub const __iovec_defined: u32 = 1;
pub const O_ACCMODE: u32 = 3;
pub const O_RDONLY: u32 = 0;
pub const O_WRONLY: u32 = 1;
pub const O_RDWR: u32 = 2;
pub const O_CREAT: u32 = 64;
pub const O_EXCL: u32 = 128;
pub const O_NOCTTY: u32 = 256;
pub const O_TRUNC: u32 = 512;
pub const O_APPEND: u32 = 1024;
pub const O_NONBLOCK: u32 = 2048;
pub const O_NDELAY: u32 = 2048;
pub const O_SYNC: u32 = 1052672;
pub const O_FSYNC: u32 = 1052672;
pub const O_ASYNC: u32 = 8192;
pub const __O_DIRECTORY: u32 = 65536;
pub const __O_NOFOLLOW: u32 = 131072;
pub const __O_CLOEXEC: u32 = 524288;
pub const __O_DIRECT: u32 = 16384;
pub const __O_NOATIME: u32 = 262144;
pub const __O_PATH: u32 = 2097152;
pub const __O_DSYNC: u32 = 4096;
pub const __O_TMPFILE: u32 = 4259840;
pub const F_GETLK: u32 = 5;
pub const F_SETLK: u32 = 6;
pub const F_SETLKW: u32 = 7;
pub const F_OFD_GETLK: u32 = 36;
pub const F_OFD_SETLK: u32 = 37;
pub const F_OFD_SETLKW: u32 = 38;
pub const O_LARGEFILE: u32 = 0;
pub const O_DIRECTORY: u32 = 65536;
pub const O_NOFOLLOW: u32 = 131072;
pub const O_CLOEXEC: u32 = 524288;
pub const O_DIRECT: u32 = 16384;
pub const O_NOATIME: u32 = 262144;
pub const O_PATH: u32 = 2097152;
pub const O_TMPFILE: u32 = 4259840;
pub const O_DSYNC: u32 = 4096;
pub const O_RSYNC: u32 = 1052672;
pub const F_DUPFD: u32 = 0;
pub const F_GETFD: u32 = 1;
pub const F_SETFD: u32 = 2;
pub const F_GETFL: u32 = 3;
pub const F_SETFL: u32 = 4;
pub const __F_SETOWN: u32 = 8;
pub const __F_GETOWN: u32 = 9;
pub const F_SETOWN: u32 = 8;
pub const F_GETOWN: u32 = 9;
pub const __F_SETSIG: u32 = 10;
pub const __F_GETSIG: u32 = 11;
pub const __F_SETOWN_EX: u32 = 15;
pub const __F_GETOWN_EX: u32 = 16;
pub const F_SETSIG: u32 = 10;
pub const F_GETSIG: u32 = 11;
pub const F_SETOWN_EX: u32 = 15;
pub const F_GETOWN_EX: u32 = 16;
pub const F_SETLEASE: u32 = 1024;
pub const F_GETLEASE: u32 = 1025;
pub const F_NOTIFY: u32 = 1026;
pub const F_SETPIPE_SZ: u32 = 1031;
pub const F_GETPIPE_SZ: u32 = 1032;
pub const F_ADD_SEALS: u32 = 1033;
pub const F_GET_SEALS: u32 = 1034;
pub const F_GET_RW_HINT: u32 = 1035;
pub const F_SET_RW_HINT: u32 = 1036;
pub const F_GET_FILE_RW_HINT: u32 = 1037;
pub const F_SET_FILE_RW_HINT: u32 = 1038;
pub const F_DUPFD_CLOEXEC: u32 = 1030;
pub const FD_CLOEXEC: u32 = 1;
pub const F_RDLCK: u32 = 0;
pub const F_WRLCK: u32 = 1;
pub const F_UNLCK: u32 = 2;
pub const F_EXLCK: u32 = 4;
pub const F_SHLCK: u32 = 8;
pub const LOCK_SH: u32 = 1;
pub const LOCK_EX: u32 = 2;
pub const LOCK_NB: u32 = 4;
pub const LOCK_UN: u32 = 8;
pub const LOCK_MAND: u32 = 32;
pub const LOCK_READ: u32 = 64;
pub const LOCK_WRITE: u32 = 128;
pub const LOCK_RW: u32 = 192;
pub const DN_ACCESS: u32 = 1;
pub const DN_MODIFY: u32 = 2;
pub const DN_CREATE: u32 = 4;
pub const DN_DELETE: u32 = 8;
pub const DN_RENAME: u32 = 16;
pub const DN_ATTRIB: u32 = 32;
pub const DN_MULTISHOT: u32 = 2147483648;
pub const F_SEAL_SEAL: u32 = 1;
pub const F_SEAL_SHRINK: u32 = 2;
pub const F_SEAL_GROW: u32 = 4;
pub const F_SEAL_WRITE: u32 = 8;
pub const F_SEAL_FUTURE_WRITE: u32 = 16;
pub const RWH_WRITE_LIFE_NOT_SET: u32 = 0;
pub const RWF_WRITE_LIFE_NOT_SET: u32 = 0;
pub const RWH_WRITE_LIFE_NONE: u32 = 1;
pub const RWH_WRITE_LIFE_SHORT: u32 = 2;
pub const RWH_WRITE_LIFE_MEDIUM: u32 = 3;
pub const RWH_WRITE_LIFE_LONG: u32 = 4;
pub const RWH_WRITE_LIFE_EXTREME: u32 = 5;
pub const FAPPEND: u32 = 1024;
pub const FFSYNC: u32 = 1052672;
pub const FASYNC: u32 = 8192;
pub const FNONBLOCK: u32 = 2048;
pub const FNDELAY: u32 = 2048;
pub const __POSIX_FADV_DONTNEED: u32 = 4;
pub const __POSIX_FADV_NOREUSE: u32 = 5;
pub const POSIX_FADV_NORMAL: u32 = 0;
pub const POSIX_FADV_RANDOM: u32 = 1;
pub const POSIX_FADV_SEQUENTIAL: u32 = 2;
pub const POSIX_FADV_WILLNEED: u32 = 3;
pub const POSIX_FADV_DONTNEED: u32 = 4;
pub const POSIX_FADV_NOREUSE: u32 = 5;
pub const SYNC_FILE_RANGE_WAIT_BEFORE: u32 = 1;
pub const SYNC_FILE_RANGE_WRITE: u32 = 2;
pub const SYNC_FILE_RANGE_WAIT_AFTER: u32 = 4;
pub const SYNC_FILE_RANGE_WRITE_AND_WAIT: u32 = 7;
pub const SPLICE_F_MOVE: u32 = 1;
pub const SPLICE_F_NONBLOCK: u32 = 2;
pub const SPLICE_F_MORE: u32 = 4;
pub const SPLICE_F_GIFT: u32 = 8;
pub const FALLOC_FL_KEEP_SIZE: u32 = 1;
pub const FALLOC_FL_PUNCH_HOLE: u32 = 2;
pub const FALLOC_FL_NO_HIDE_STALE: u32 = 4;
pub const FALLOC_FL_COLLAPSE_RANGE: u32 = 8;
pub const FALLOC_FL_ZERO_RANGE: u32 = 16;
pub const FALLOC_FL_INSERT_RANGE: u32 = 32;
pub const FALLOC_FL_UNSHARE_RANGE: u32 = 64;
pub const MAX_HANDLE_SZ: u32 = 128;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const AT_FDCWD: i32 = -100;
pub const AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const AT_REMOVEDIR: u32 = 512;
pub const AT_SYMLINK_FOLLOW: u32 = 1024;
pub const AT_NO_AUTOMOUNT: u32 = 2048;
pub const AT_EMPTY_PATH: u32 = 4096;
pub const AT_STATX_SYNC_TYPE: u32 = 24576;
pub const AT_STATX_SYNC_AS_STAT: u32 = 0;
pub const AT_STATX_FORCE_SYNC: u32 = 8192;
pub const AT_STATX_DONT_SYNC: u32 = 16384;
pub const AT_RECURSIVE: u32 = 32768;
pub const AT_EACCESS: u32 = 512;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &'static [u8; 48usize] =
    b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &'static [u8; 5usize] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &'static [u8; 5usize] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const L_cuserid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const RENAME_NOREPLACE: u32 = 1;
pub const RENAME_EXCHANGE: u32 = 2;
pub const RENAME_WHITEOUT: u32 = 4;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const _ASSERT_H: u32 = 1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const __error_t_defined: u32 = 1;
pub const MAX_PATH: usize = 1024;
pub const FILE_BEGIN: u32 = 0;
pub const FILE_CURRENT: u32 = 1;
pub const FILE_END: u32 = 2;

pub const ERROR_SUCCESS: u32 = 0;

pub const ERROR_FILE_NOT_FOUND: u32 = 2;

#[cfg(target_os = "linux")]
pub const ERROR_ACCESS_DENIED: u32 = 1;
#[cfg(target_os = "windows")]
pub const  ERROR_ACCESS_DENIED: u32 = 5;

#[cfg(target_os = "linux")]
pub const ERROR_INVALID_HANDLE: u32 = 9;
#[cfg(target_os = "windows")]
pub const ERROR_INVALID_HANDLE: u32 = 6;

#[cfg(target_os = "linux")]
pub const ERROR_NOT_ENOUGH_MEMORY: u32 = 12;
#[cfg(target_os = "windows")]
pub const ERROR_NOT_ENOUGH_MEMORY: u32 = 8;

#[cfg(target_os = "linux")]
pub const ERROR_NOT_SUPPORTED: u32 = 95;
#[cfg(target_os = "windows")]
pub const ERROR_NOT_SUPPORTED: u32 = 50;

#[cfg(target_os = "linux")]
pub const ERROR_INVALID_PARAMETER: u32 = 22;
#[cfg(target_os = "windows")]
pub const ERROR_INVALID_PARAMETER: u32 = 87;

#[cfg(target_os = "linux")]
pub const ERROR_NEGATIVE_SEEK: u32 = 29;
#[cfg(target_os = "windows")]
pub const ERROR_NEGATIVE_SEEK: u32 = 131;

#[cfg(target_os = "linux")]
pub const ERROR_DISK_FULL: u32 = 28;
#[cfg(target_os = "windows")]
pub const ERROR_DISK_FULL: u32 = 39;

#[cfg(target_os = "linux")]
pub const ERROR_ALREADY_EXISTS: u32 = 17;
#[cfg(target_os = "windows")]
pub const ERROR_ALREADY_EXISTS: u32 = 183;

#[cfg(target_os = "linux")]
pub const ERROR_INSUFFICIENT_BUFFER: u32 = 105;
#[cfg(target_os = "windows")]
pub const ERROR_INSUFFICIENT_BUFFER: u32 = 122;

#[cfg(target_os = "linux")]
pub const ERROR_BAD_FORMAT: u32 = 1000;
#[cfg(target_os = "windows")]
pub const ERROR_BAD_FORMAT: u32 = 11;

#[cfg(target_os = "linux")]
pub const ERROR_NO_MORE_FILES: u32 = 1001;
#[cfg(target_os = "windows")]
pub const ERROR_NO_MORE_FILES: u32 = 18;

#[cfg(target_os = "linux")]
pub const ERROR_HANDLE_EOF: u32 = 1002;
#[cfg(target_os = "windows")]
pub const ERROR_HANDLE_EOF: u32 =  38;

pub const ERROR_CAN_NOT_COMPLETE: u32 = 1003;

#[cfg(target_os = "linux")]
pub const ERROR_FILE_CORRUPT: u32 = 1004;
#[cfg(target_os = "windows")]
pub const ERROR_FILE_CORRUPT: u32 = 1392;


pub const STORMLIB_VERSION: u32 = 2327;
pub const STORMLIB_VERSION_STRING: &'static [u8; 5usize] = b"9.23\0";
pub const ID_MPQ: u32 = 441536589;
pub const ID_MPQ_USERDATA: u32 = 458313805;
pub const ID_MPK: u32 = 441143373;
pub const ERROR_AVI_FILE: u32 = 10000;
pub const ERROR_UNKNOWN_FILE_KEY: u32 = 10001;
pub const ERROR_CHECKSUM_ERROR: u32 = 10002;
pub const ERROR_INTERNAL_FILE: u32 = 10003;
pub const ERROR_BASE_FILE_MISSING: u32 = 10004;
pub const ERROR_MARKED_FOR_DELETE: u32 = 10005;
pub const ERROR_FILE_INCOMPLETE: u32 = 10006;
pub const ERROR_UNKNOWN_FILE_NAMES: u32 = 10007;
pub const ERROR_CANT_FIND_PATCH_PREFIX: u32 = 10008;
pub const ERROR_FAKE_MPQ_HEADER: u32 = 10009;
pub const HASH_TABLE_SIZE_MIN: u32 = 4;
pub const HASH_TABLE_SIZE_DEFAULT: u32 = 4096;
pub const HASH_TABLE_SIZE_MAX: u32 = 524288;
pub const HASH_ENTRY_DELETED: u32 = 4294967294;
pub const HASH_ENTRY_FREE: u32 = 4294967295;
pub const HET_ENTRY_DELETED: u32 = 128;
pub const HET_ENTRY_FREE: u32 = 0;
pub const HASH_STATE_SIZE: u32 = 96;
pub const SFILE_OPEN_HARD_DISK_FILE: u32 = 2;
pub const SFILE_OPEN_CDROM_FILE: u32 = 3;
pub const SFILE_OPEN_FROM_MPQ: u32 = 0;
pub const SFILE_OPEN_CHECK_EXISTS: u32 = 4294967292;
pub const SFILE_OPEN_BASE_FILE: u32 = 4294967293;
pub const SFILE_OPEN_ANY_LOCALE: u32 = 4294967294;
pub const SFILE_OPEN_LOCAL_FILE: u32 = 4294967295;
pub const MPQ_FLAG_READ_ONLY: u32 = 1;
pub const MPQ_FLAG_CHANGED: u32 = 2;
pub const MPQ_FLAG_MALFORMED: u32 = 4;
pub const MPQ_FLAG_HASH_TABLE_CUT: u32 = 8;
pub const MPQ_FLAG_BLOCK_TABLE_CUT: u32 = 16;
pub const MPQ_FLAG_CHECK_SECTOR_CRC: u32 = 32;
pub const MPQ_FLAG_SAVING_TABLES: u32 = 64;
pub const MPQ_FLAG_PATCH: u32 = 128;
pub const MPQ_FLAG_WAR3_MAP: u32 = 256;
pub const MPQ_FLAG_LISTFILE_NONE: u32 = 512;
pub const MPQ_FLAG_LISTFILE_NEW: u32 = 1024;
pub const MPQ_FLAG_LISTFILE_FORCE: u32 = 2048;
pub const MPQ_FLAG_ATTRIBUTES_NONE: u32 = 4096;
pub const MPQ_FLAG_ATTRIBUTES_NEW: u32 = 8192;
pub const MPQ_FLAG_SIGNATURE_NONE: u32 = 16384;
pub const MPQ_FLAG_SIGNATURE_NEW: u32 = 32768;
pub const MPQ_SUBTYPE_MPQ: u32 = 0;
pub const MPQ_SUBTYPE_SQP: u32 = 1;
pub const MPQ_SUBTYPE_MPK: u32 = 2;
pub const SFILE_INVALID_SIZE: u32 = 4294967295;
pub const SFILE_INVALID_POS: u32 = 4294967295;
pub const SFILE_INVALID_ATTRIBUTES: u32 = 4294967295;
pub const MPQ_FILE_IMPLODE: u32 = 256;
pub const MPQ_FILE_COMPRESS: u32 = 512;
pub const MPQ_FILE_ENCRYPTED: u32 = 65536;
pub const MPQ_FILE_FIX_KEY: u32 = 131072;
pub const MPQ_FILE_PATCH_FILE: u32 = 1048576;
pub const MPQ_FILE_SINGLE_UNIT: u32 = 16777216;
pub const MPQ_FILE_DELETE_MARKER: u32 = 33554432;
pub const MPQ_FILE_SECTOR_CRC: u32 = 67108864;
pub const MPQ_FILE_SIGNATURE: u32 = 268435456;
pub const MPQ_FILE_EXISTS: u32 = 2147483648;
pub const MPQ_FILE_REPLACEEXISTING: u32 = 2147483648;
pub const MPQ_FILE_COMPRESS_MASK: u32 = 65280;
pub const MPQ_FILE_DEFAULT_INTERNAL: u32 = 4294967295;
pub const MPQ_FILE_VALID_FLAGS: u32 = 2534605568;
pub const MPQ_FILE_VALID_FLAGS_W3X: u32 = 2516779776;
pub const BLOCK_INDEX_MASK: u32 = 268435455;
pub const MPQ_COMPRESSION_HUFFMANN: u32 = 1;
pub const MPQ_COMPRESSION_ZLIB: u32 = 2;
pub const MPQ_COMPRESSION_PKWARE: u32 = 8;
pub const MPQ_COMPRESSION_BZIP2: u32 = 16;
pub const MPQ_COMPRESSION_SPARSE: u32 = 32;
pub const MPQ_COMPRESSION_ADPCM_MONO: u32 = 64;
pub const MPQ_COMPRESSION_ADPCM_STEREO: u32 = 128;
pub const MPQ_COMPRESSION_LZMA: u32 = 18;
pub const MPQ_COMPRESSION_NEXT_SAME: u32 = 4294967295;
pub const MPQ_WAVE_QUALITY_HIGH: u32 = 0;
pub const MPQ_WAVE_QUALITY_MEDIUM: u32 = 1;
pub const MPQ_WAVE_QUALITY_LOW: u32 = 2;
pub const HET_TABLE_SIGNATURE: u32 = 441730376;
pub const BET_TABLE_SIGNATURE: u32 = 441730370;
pub const MPQ_KEY_HASH_TABLE: u32 = 3283040112;
pub const MPQ_KEY_BLOCK_TABLE: u32 = 3968054179;
pub const LISTFILE_NAME: &'static [u8; 11usize] = b"(listfile)\0";
pub const SIGNATURE_NAME: &'static [u8; 12usize] = b"(signature)\0";
pub const ATTRIBUTES_NAME: &'static [u8; 13usize] = b"(attributes)\0";
pub const PATCH_METADATA_NAME: &'static [u8; 17usize] = b"(patch_metadata)\0";
pub const MPQ_FORMAT_VERSION_1: u32 = 0;
pub const MPQ_FORMAT_VERSION_2: u32 = 1;
pub const MPQ_FORMAT_VERSION_3: u32 = 2;
pub const MPQ_FORMAT_VERSION_4: u32 = 3;
pub const MPQ_ATTRIBUTE_CRC32: u32 = 1;
pub const MPQ_ATTRIBUTE_FILETIME: u32 = 2;
pub const MPQ_ATTRIBUTE_MD5: u32 = 4;
pub const MPQ_ATTRIBUTE_PATCH_BIT: u32 = 8;
pub const MPQ_ATTRIBUTE_ALL: u32 = 15;
pub const MPQ_ATTRIBUTES_V1: u32 = 100;
pub const BASE_PROVIDER_FILE: u32 = 0;
pub const BASE_PROVIDER_MAP: u32 = 1;
pub const BASE_PROVIDER_HTTP: u32 = 2;
pub const BASE_PROVIDER_MASK: u32 = 15;
pub const STREAM_PROVIDER_FLAT: u32 = 0;
pub const STREAM_PROVIDER_PARTIAL: u32 = 16;
pub const STREAM_PROVIDER_MPQE: u32 = 32;
pub const STREAM_PROVIDER_BLOCK4: u32 = 48;
pub const STREAM_PROVIDER_MASK: u32 = 240;
pub const STREAM_FLAG_READ_ONLY: u32 = 256;
pub const STREAM_FLAG_WRITE_SHARE: u32 = 512;
pub const STREAM_FLAG_USE_BITMAP: u32 = 1024;
pub const STREAM_OPTIONS_MASK: u32 = 65280;
pub const STREAM_PROVIDERS_MASK: u32 = 255;
pub const STREAM_FLAGS_MASK: u32 = 65535;
pub const MPQ_OPEN_NO_LISTFILE: u32 = 65536;
pub const MPQ_OPEN_NO_ATTRIBUTES: u32 = 131072;
pub const MPQ_OPEN_NO_HEADER_SEARCH: u32 = 262144;
pub const MPQ_OPEN_FORCE_MPQ_V1: u32 = 524288;
pub const MPQ_OPEN_CHECK_SECTOR_CRC: u32 = 1048576;
pub const MPQ_OPEN_PATCH: u32 = 2097152;
pub const MPQ_OPEN_FORCE_LISTFILE: u32 = 4194304;
pub const MPQ_OPEN_READ_ONLY: u32 = 256;
pub const MPQ_CREATE_LISTFILE: u32 = 1048576;
pub const MPQ_CREATE_ATTRIBUTES: u32 = 2097152;
pub const MPQ_CREATE_SIGNATURE: u32 = 4194304;
pub const MPQ_CREATE_ARCHIVE_V1: u32 = 0;
pub const MPQ_CREATE_ARCHIVE_V2: u32 = 16777216;
pub const MPQ_CREATE_ARCHIVE_V3: u32 = 33554432;
pub const MPQ_CREATE_ARCHIVE_V4: u32 = 50331648;
pub const MPQ_CREATE_ARCHIVE_VMASK: u32 = 251658240;
pub const FLAGS_TO_FORMAT_SHIFT: u32 = 24;
pub const SFILE_VERIFY_SECTOR_CRC: u32 = 1;
pub const SFILE_VERIFY_FILE_CRC: u32 = 2;
pub const SFILE_VERIFY_FILE_MD5: u32 = 4;
pub const SFILE_VERIFY_RAW_MD5: u32 = 8;
pub const SFILE_VERIFY_ALL: u32 = 15;
pub const VERIFY_OPEN_ERROR: u32 = 1;
pub const VERIFY_READ_ERROR: u32 = 2;
pub const VERIFY_FILE_HAS_SECTOR_CRC: u32 = 4;
pub const VERIFY_FILE_SECTOR_CRC_ERROR: u32 = 8;
pub const VERIFY_FILE_HAS_CHECKSUM: u32 = 16;
pub const VERIFY_FILE_CHECKSUM_ERROR: u32 = 32;
pub const VERIFY_FILE_HAS_MD5: u32 = 64;
pub const VERIFY_FILE_MD5_ERROR: u32 = 128;
pub const VERIFY_FILE_HAS_RAW_MD5: u32 = 256;
pub const VERIFY_FILE_RAW_MD5_ERROR: u32 = 512;
pub const VERIFY_FILE_ERROR_MASK: u32 = 683;
pub const SFILE_VERIFY_MPQ_HEADER: u32 = 1;
pub const SFILE_VERIFY_HET_TABLE: u32 = 2;
pub const SFILE_VERIFY_BET_TABLE: u32 = 3;
pub const SFILE_VERIFY_HASH_TABLE: u32 = 4;
pub const SFILE_VERIFY_BLOCK_TABLE: u32 = 5;
pub const SFILE_VERIFY_HIBLOCK_TABLE: u32 = 6;
pub const SFILE_VERIFY_FILE: u32 = 7;
pub const SIGNATURE_TYPE_NONE: u32 = 0;
pub const SIGNATURE_TYPE_WEAK: u32 = 1;
pub const SIGNATURE_TYPE_STRONG: u32 = 2;
pub const ERROR_NO_SIGNATURE: u32 = 0;
pub const ERROR_VERIFY_FAILED: u32 = 1;
pub const ERROR_WEAK_SIGNATURE_OK: u32 = 2;
pub const ERROR_WEAK_SIGNATURE_ERROR: u32 = 3;
pub const ERROR_STRONG_SIGNATURE_OK: u32 = 4;
pub const ERROR_STRONG_SIGNATURE_ERROR: u32 = 5;
pub const MD5_DIGEST_SIZE: u32 = 16;
pub const SHA1_DIGEST_SIZE: u32 = 20;
pub const LANG_NEUTRAL: u32 = 0;
pub const CCB_CHECKING_FILES: u32 = 1;
pub const CCB_CHECKING_HASH_TABLE: u32 = 2;
pub const CCB_COPYING_NON_MPQ_DATA: u32 = 3;
pub const CCB_COMPACTING_FILES: u32 = 4;
pub const CCB_CLOSING_ARCHIVE: u32 = 5;
pub const MPQ_HEADER_SIZE_V1: u32 = 32;
pub const MPQ_HEADER_SIZE_V2: u32 = 44;
pub const MPQ_HEADER_SIZE_V3: u32 = 68;
pub const MPQ_HEADER_SIZE_V4: u32 = 208;
pub const MPQ_HEADER_DWORDS: u32 = 52;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type ino64_t = __ino64_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type useconds_t = __useconds_t;
pub type suseconds_t = __suseconds_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type blkcnt64_t = __blkcnt64_t;
pub type fsblkcnt64_t = __fsblkcnt64_t;
pub type fsfilcnt64_t = __fsfilcnt64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_slist>())).__next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__once_flag>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat64 {
    pub st_dev: __dev_t,
    pub st_ino: __ino64_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt64_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat64() {
    assert_eq!(
        ::std::mem::size_of::<stat64>(),
        144usize,
        concat!("Size of: ", stringify!(stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(stat64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mode as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_uid as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_gid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).__pad0 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_rdev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blksize as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blocks as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_atim as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mtim as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ctim as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).__glibc_reserved as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stat64(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat64(__fd: ::std::os::raw::c_int, __buf: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat64(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat64,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat64(
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn getumask() -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statx_timestamp {
    pub tv_sec: __s64,
    pub tv_nsec: __u32,
    pub __reserved: __s32,
}
#[test]
fn bindgen_test_layout_statx_timestamp() {
    assert_eq!(
        ::std::mem::size_of::<statx_timestamp>(),
        16usize,
        concat!("Size of: ", stringify!(statx_timestamp))
    );
    assert_eq!(
        ::std::mem::align_of::<statx_timestamp>(),
        8usize,
        concat!("Alignment of ", stringify!(statx_timestamp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx_timestamp>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statx_timestamp),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx_timestamp>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statx_timestamp),
            "::",
            stringify!(tv_nsec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx_timestamp>())).__reserved as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(statx_timestamp),
            "::",
            stringify!(__reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statx {
    pub stx_mask: __u32,
    pub stx_blksize: __u32,
    pub stx_attributes: __u64,
    pub stx_nlink: __u32,
    pub stx_uid: __u32,
    pub stx_gid: __u32,
    pub stx_mode: __u16,
    pub __spare0: [__u16; 1usize],
    pub stx_ino: __u64,
    pub stx_size: __u64,
    pub stx_blocks: __u64,
    pub stx_attributes_mask: __u64,
    pub stx_atime: statx_timestamp,
    pub stx_btime: statx_timestamp,
    pub stx_ctime: statx_timestamp,
    pub stx_mtime: statx_timestamp,
    pub stx_rdev_major: __u32,
    pub stx_rdev_minor: __u32,
    pub stx_dev_major: __u32,
    pub stx_dev_minor: __u32,
    pub stx_mnt_id: __u64,
    pub __spare2: __u64,
    pub __spare3: [__u64; 12usize],
}
#[test]
fn bindgen_test_layout_statx() {
    assert_eq!(
        ::std::mem::size_of::<statx>(),
        256usize,
        concat!("Size of: ", stringify!(statx))
    );
    assert_eq!(
        ::std::mem::align_of::<statx>(),
        8usize,
        concat!("Alignment of ", stringify!(statx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_blksize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_attributes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_attributes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_nlink as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_uid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_gid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_mode as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).__spare0 as *const _ as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(__spare0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_ino as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_blocks as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_attributes_mask as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_attributes_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_atime as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_btime as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_btime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_ctime as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_mtime as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_rdev_major as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_rdev_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_rdev_minor as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_rdev_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_dev_major as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_dev_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_dev_minor as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_dev_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).stx_mnt_id as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(stx_mnt_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).__spare2 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(__spare2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<statx>())).__spare3 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(statx),
            "::",
            stringify!(__spare3)
        )
    );
}
// extern "C" {
//     pub fn statx(
//         __dirfd: ::std::os::raw::c_int,
//         __path: *const ::std::os::raw::c_char,
//         __flags: ::std::os::raw::c_int,
//         __mask: ::std::os::raw::c_uint,
//         __buf: *mut statx,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn memfd_create(
//         __name: *const ::std::os::raw::c_char,
//         __flags: ::std::os::raw::c_uint,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mlock2(
//         __addr: *const ::std::os::raw::c_void,
//         __length: size_t,
//         __flags: ::std::os::raw::c_uint,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn pkey_alloc(
//         __flags: ::std::os::raw::c_uint,
//         __access_rights: ::std::os::raw::c_uint,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn pkey_set(
//         __key: ::std::os::raw::c_int,
//         __access_rights: ::std::os::raw::c_uint,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn pkey_get(__key: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn pkey_free(__key: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn pkey_mprotect(
//         __addr: *mut ::std::os::raw::c_void,
//         __len: size_t,
//         __prot: ::std::os::raw::c_int,
//         __pkey: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mmap(
//         __addr: *mut ::std::os::raw::c_void,
//         __len: size_t,
//         __prot: ::std::os::raw::c_int,
//         __flags: ::std::os::raw::c_int,
//         __fd: ::std::os::raw::c_int,
//         __offset: __off_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn mmap64(
//         __addr: *mut ::std::os::raw::c_void,
//         __len: size_t,
//         __prot: ::std::os::raw::c_int,
//         __flags: ::std::os::raw::c_int,
//         __fd: ::std::os::raw::c_int,
//         __offset: __off64_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn munmap(__addr: *mut ::std::os::raw::c_void, __len: size_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mprotect(
//         __addr: *mut ::std::os::raw::c_void,
//         __len: size_t,
//         __prot: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn msync(
//         __addr: *mut ::std::os::raw::c_void,
//         __len: size_t,
//         __flags: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn madvise(
//         __addr: *mut ::std::os::raw::c_void,
//         __len: size_t,
//         __advice: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn posix_madvise(
//         __addr: *mut ::std::os::raw::c_void,
//         __len: size_t,
//         __advice: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mlock(__addr: *const ::std::os::raw::c_void, __len: size_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn munlock(__addr: *const ::std::os::raw::c_void, __len: size_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mlockall(__flags: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn munlockall() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mincore(
//         __start: *mut ::std::os::raw::c_void,
//         __len: size_t,
//         __vec: *mut ::std::os::raw::c_uchar,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mremap(
//         __addr: *mut ::std::os::raw::c_void,
//         __old_len: size_t,
//         __new_len: size_t,
//         __flags: ::std::os::raw::c_int,
//         ...
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn remap_file_pages(
//         __start: *mut ::std::os::raw::c_void,
//         __size: size_t,
//         __prot: ::std::os::raw::c_int,
//         __pgoff: size_t,
//         __flags: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn shm_open(
//         __name: *const ::std::os::raw::c_char,
//         __oflag: ::std::os::raw::c_int,
//         __mode: mode_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn shm_unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off_t,
    pub l_len: __off_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        32usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock64 {
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
    pub l_start: __off64_t,
    pub l_len: __off64_t,
    pub l_pid: __pid_t,
}
#[test]
fn bindgen_test_layout_flock64() {
    assert_eq!(
        ::std::mem::size_of::<flock64>(),
        32usize,
        concat!("Size of: ", stringify!(flock64))
    );
    assert_eq!(
        ::std::mem::align_of::<flock64>(),
        8usize,
        concat!("Alignment of ", stringify!(flock64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock64>())).l_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock64),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock64>())).l_whence as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(flock64),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock64>())).l_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock64),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock64>())).l_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock64),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<flock64>())).l_pid as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(flock64),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub const __pid_type_F_OWNER_TID: __pid_type = 0;
pub const __pid_type_F_OWNER_PID: __pid_type = 1;
pub const __pid_type_F_OWNER_PGRP: __pid_type = 2;
pub const __pid_type_F_OWNER_GID: __pid_type = 2;
pub type __pid_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct f_owner_ex {
    pub type_: __pid_type,
    pub pid: __pid_t,
}
#[test]
fn bindgen_test_layout_f_owner_ex() {
    assert_eq!(
        ::std::mem::size_of::<f_owner_ex>(),
        8usize,
        concat!("Size of: ", stringify!(f_owner_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<f_owner_ex>(),
        4usize,
        concat!("Alignment of ", stringify!(f_owner_ex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f_owner_ex>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(f_owner_ex),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<f_owner_ex>())).pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(f_owner_ex),
            "::",
            stringify!(pid)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct file_handle {
    pub handle_bytes: ::std::os::raw::c_uint,
    pub handle_type: ::std::os::raw::c_int,
    pub f_handle: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_file_handle() {
    assert_eq!(
        ::std::mem::size_of::<file_handle>(),
        8usize,
        concat!("Size of: ", stringify!(file_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<file_handle>(),
        4usize,
        concat!("Alignment of ", stringify!(file_handle))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_handle>())).handle_bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(file_handle),
            "::",
            stringify!(handle_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_handle>())).handle_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(file_handle),
            "::",
            stringify!(handle_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<file_handle>())).f_handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(file_handle),
            "::",
            stringify!(f_handle)
        )
    );
}
extern "C" {
    pub fn readahead(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __count: size_t,
    ) -> __ssize_t;
}
extern "C" {
    pub fn sync_file_range(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __count: __off64_t,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vmsplice(
        __fdout: ::std::os::raw::c_int,
        __iov: *const iovec,
        __count: size_t,
        __flags: ::std::os::raw::c_uint,
    ) -> __ssize_t;
}
extern "C" {
    pub fn splice(
        __fdin: ::std::os::raw::c_int,
        __offin: *mut __off64_t,
        __fdout: ::std::os::raw::c_int,
        __offout: *mut __off64_t,
        __len: size_t,
        __flags: ::std::os::raw::c_uint,
    ) -> __ssize_t;
}
extern "C" {
    pub fn tee(
        __fdin: ::std::os::raw::c_int,
        __fdout: ::std::os::raw::c_int,
        __len: size_t,
        __flags: ::std::os::raw::c_uint,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fallocate(
        __fd: ::std::os::raw::c_int,
        __mode: ::std::os::raw::c_int,
        __offset: __off_t,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fallocate64(
        __fd: ::std::os::raw::c_int,
        __mode: ::std::os::raw::c_int,
        __offset: __off64_t,
        __len: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn name_to_handle_at(
        __dfd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __handle: *mut file_handle,
        __mnt_id: *mut ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open_by_handle_at(
        __mountdirfd: ::std::os::raw::c_int,
        __handle: *mut file_handle,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcntl64(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn open64(
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn openat64(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __oflag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn creat64(__file: *const ::std::os::raw::c_char, __mode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf64(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fadvise64(
        __fd: ::std::os::raw::c_int,
        __offset: off64_t,
        __len: off64_t,
        __advise: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate(
        __fd: ::std::os::raw::c_int,
        __offset: off_t,
        __len: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_fallocate64(
        __fd: ::std::os::raw::c_int,
        __offset: off64_t,
        __len: off64_t,
    ) -> ::std::os::raw::c_int;
}
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn euidaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn lseek64(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pread64(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: size_t,
        __offset: __off64_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pwrite64(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __offset: __off64_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe2(
        __pipedes: *mut ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(
        __buf: *mut ::std::os::raw::c_char,
        __size: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_current_dir_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup3(
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvpe(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int);
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = u32;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub type _bindgen_ty_2 = u32;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = u32;
// extern "C" {
//     pub fn pathconf(
//         __path: *const ::std::os::raw::c_char,
//         __name: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn fpathconf(
//         __fd: ::std::os::raw::c_int,
//         __name: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn confstr(
//         __name: ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> size_t;
// }
// extern "C" {
//     pub fn getpid() -> __pid_t;
// }
// extern "C" {
//     pub fn getppid() -> __pid_t;
// }
// extern "C" {
//     pub fn getpgrp() -> __pid_t;
// }
// extern "C" {
//     pub fn __getpgid(__pid: __pid_t) -> __pid_t;
// }
// extern "C" {
//     pub fn getpgid(__pid: __pid_t) -> __pid_t;
// }
// extern "C" {
//     pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setpgrp() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setsid() -> __pid_t;
// }
// extern "C" {
//     pub fn getsid(__pid: __pid_t) -> __pid_t;
// }
// extern "C" {
//     pub fn getuid() -> __uid_t;
// }
// extern "C" {
//     pub fn geteuid() -> __uid_t;
// }
// extern "C" {
//     pub fn getgid() -> __gid_t;
// }
// extern "C" {
//     pub fn getegid() -> __gid_t;
// }
// extern "C" {
//     pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn group_member(__gid: __gid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getresuid(
//         __ruid: *mut __uid_t,
//         __euid: *mut __uid_t,
//         __suid: *mut __uid_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getresgid(
//         __rgid: *mut __gid_t,
//         __egid: *mut __gid_t,
//         __sgid: *mut __gid_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setresuid(__ruid: __uid_t, __euid: __uid_t, __suid: __uid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setresgid(__rgid: __gid_t, __egid: __gid_t, __sgid: __gid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fork() -> __pid_t;
// }
// extern "C" {
//     pub fn vfork() -> __pid_t;
// }
// extern "C" {
//     pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn ttyname_r(
//         __fd: ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//         __buflen: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ttyslot() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn link(
//         __from: *const ::std::os::raw::c_char,
//         __to: *const ::std::os::raw::c_char,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn linkat(
//         __fromfd: ::std::os::raw::c_int,
//         __from: *const ::std::os::raw::c_char,
//         __tofd: ::std::os::raw::c_int,
//         __to: *const ::std::os::raw::c_char,
//         __flags: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn symlink(
//         __from: *const ::std::os::raw::c_char,
//         __to: *const ::std::os::raw::c_char,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn readlink(
//         __path: *const ::std::os::raw::c_char,
//         __buf: *mut ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> ssize_t;
// }
// extern "C" {
//     pub fn symlinkat(
//         __from: *const ::std::os::raw::c_char,
//         __tofd: ::std::os::raw::c_int,
//         __to: *const ::std::os::raw::c_char,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn readlinkat(
//         __fd: ::std::os::raw::c_int,
//         __path: *const ::std::os::raw::c_char,
//         __buf: *mut ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> ssize_t;
// }
// extern "C" {
//     pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn unlinkat(
//         __fd: ::std::os::raw::c_int,
//         __name: *const ::std::os::raw::c_char,
//         __flag: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
// }
// extern "C" {
//     pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getlogin() -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn getlogin_r(
//         __name: *mut ::std::os::raw::c_char,
//         __name_len: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub static mut optarg: *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub static mut optind: ::std::os::raw::c_int;
// }
// extern "C" {
//     pub static mut opterr: ::std::os::raw::c_int;
// }
// extern "C" {
//     pub static mut optopt: ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getopt(
//         ___argc: ::std::os::raw::c_int,
//         ___argv: *const *mut ::std::os::raw::c_char,
//         __shortopts: *const ::std::os::raw::c_char,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: size_t)
//         -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn sethostname(
//         __name: *const ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getdomainname(
//         __name: *mut ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setdomainname(
//         __name: *const ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn vhangup() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn profil(
//         __sample_buffer: *mut ::std::os::raw::c_ushort,
//         __size: size_t,
//         __offset: size_t,
//         __scale: ::std::os::raw::c_uint,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getusershell() -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn endusershell();
// }
// extern "C" {
//     pub fn setusershell();
// }
// extern "C" {
//     pub fn daemon(
//         __nochdir: ::std::os::raw::c_int,
//         __noclose: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn syncfs(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn gethostid() -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn sync();
// }
// extern "C" {
//     pub fn getpagesize() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getdtablesize() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn truncate(
//         __file: *const ::std::os::raw::c_char,
//         __length: __off_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn truncate64(
//         __file: *const ::std::os::raw::c_char,
//         __length: __off64_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ftruncate64(__fd: ::std::os::raw::c_int, __length: __off64_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn copy_file_range(
//         __infd: ::std::os::raw::c_int,
//         __pinoff: *mut __off64_t,
//         __outfd: ::std::os::raw::c_int,
//         __poutoff: *mut __off64_t,
//         __length: size_t,
//         __flags: ::std::os::raw::c_uint,
//     ) -> ssize_t;
// }
// extern "C" {
//     pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn crypt(
//         __key: *const ::std::os::raw::c_char,
//         __salt: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn swab(
//         __from: *const ::std::os::raw::c_void,
//         __to: *mut ::std::os::raw::c_void,
//         __n: ssize_t,
//     );
// }
// extern "C" {
//     pub fn getentropy(
//         __buffer: *mut ::std::os::raw::c_void,
//         __length: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn gettid() -> __pid_t;
// }
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
// extern "C" {
//     pub fn __ctype_get_mb_cur_max() -> size_t;
// }
// extern "C" {
//     pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
// }
// extern "C" {
//     pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
// }
// extern "C" {
//     pub fn strtod(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//     ) -> f64;
// }
// extern "C" {
//     pub fn strtof(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//     ) -> f32;
// }
// extern "C" {
//     pub fn strtold(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//     ) -> u128;
// }
// extern "C" {
//     pub fn strtof32(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//     ) -> _Float32;
// }
// extern "C" {
//     pub fn strtof64(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//     ) -> _Float64;
// }
// extern "C" {
//     pub fn strtof32x(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//     ) -> _Float32x;
// }
// extern "C" {
//     pub fn strtof64x(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//     ) -> _Float64x;
// }
// extern "C" {
//     pub fn strtol(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn strtoul(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_ulong;
// }
// extern "C" {
//     pub fn strtoq(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_longlong;
// }
// extern "C" {
//     pub fn strtouq(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_ulonglong;
// }
// extern "C" {
//     pub fn strtoll(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_longlong;
// }
// extern "C" {
//     pub fn strtoull(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_ulonglong;
// }
// extern "C" {
//     pub fn strfromd(
//         __dest: *mut ::std::os::raw::c_char,
//         __size: size_t,
//         __format: *const ::std::os::raw::c_char,
//         __f: f64,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strfromf(
//         __dest: *mut ::std::os::raw::c_char,
//         __size: size_t,
//         __format: *const ::std::os::raw::c_char,
//         __f: f32,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strfroml(
//         __dest: *mut ::std::os::raw::c_char,
//         __size: size_t,
//         __format: *const ::std::os::raw::c_char,
//         __f: u128,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strfromf32(
//         __dest: *mut ::std::os::raw::c_char,
//         __size: size_t,
//         __format: *const ::std::os::raw::c_char,
//         __f: _Float32,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strfromf64(
//         __dest: *mut ::std::os::raw::c_char,
//         __size: size_t,
//         __format: *const ::std::os::raw::c_char,
//         __f: _Float64,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strfromf32x(
//         __dest: *mut ::std::os::raw::c_char,
//         __size: size_t,
//         __format: *const ::std::os::raw::c_char,
//         __f: _Float32x,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strfromf64x(
//         __dest: *mut ::std::os::raw::c_char,
//         __size: size_t,
//         __format: *const ::std::os::raw::c_char,
//         __f: _Float64x,
//     ) -> ::std::os::raw::c_int;
// }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
// extern "C" {
//     pub fn strtol_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//         __loc: locale_t,
//     ) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn strtoul_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//         __loc: locale_t,
//     ) -> ::std::os::raw::c_ulong;
// }
// extern "C" {
//     pub fn strtoll_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//         __loc: locale_t,
//     ) -> ::std::os::raw::c_longlong;
// }
// extern "C" {
//     pub fn strtoull_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __base: ::std::os::raw::c_int,
//         __loc: locale_t,
//     ) -> ::std::os::raw::c_ulonglong;
// }
// extern "C" {
//     pub fn strtod_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __loc: locale_t,
//     ) -> f64;
// }
// extern "C" {
//     pub fn strtof_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __loc: locale_t,
//     ) -> f32;
// }
// extern "C" {
//     pub fn strtold_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __loc: locale_t,
//     ) -> u128;
// }
// extern "C" {
//     pub fn strtof32_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __loc: locale_t,
//     ) -> _Float32;
// }
// extern "C" {
//     pub fn strtof64_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __loc: locale_t,
//     ) -> _Float64;
// }
// extern "C" {
//     pub fn strtof32x_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __loc: locale_t,
//     ) -> _Float32x;
// }
// extern "C" {
//     pub fn strtof64x_l(
//         __nptr: *const ::std::os::raw::c_char,
//         __endptr: *mut *mut ::std::os::raw::c_char,
//         __loc: locale_t,
//     ) -> _Float64x;
// }
// extern "C" {
//     pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn random() -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn srandom(__seed: ::std::os::raw::c_uint);
// }
// extern "C" {
//     pub fn initstate(
//         __seed: ::std::os::raw::c_uint,
//         __statebuf: *mut ::std::os::raw::c_char,
//         __statelen: size_t,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
// extern "C" {
//     pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn srandom_r(
//         __seed: ::std::os::raw::c_uint,
//         __buf: *mut random_data,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn initstate_r(
//         __seed: ::std::os::raw::c_uint,
//         __statebuf: *mut ::std::os::raw::c_char,
//         __statelen: size_t,
//         __buf: *mut random_data,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setstate_r(
//         __statebuf: *mut ::std::os::raw::c_char,
//         __buf: *mut random_data,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn rand() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn srand(__seed: ::std::os::raw::c_uint);
// }
// extern "C" {
//     pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn drand48() -> f64;
// }
// extern "C" {
//     pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
// }
// extern "C" {
//     pub fn lrand48() -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn mrand48() -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn srand48(__seedval: ::std::os::raw::c_long);
// }
// extern "C" {
//     pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
// }
// extern "C" {
//     pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
// }
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
// extern "C" {
//     pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn erand48_r(
//         __xsubi: *mut ::std::os::raw::c_ushort,
//         __buffer: *mut drand48_data,
//         __result: *mut f64,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn lrand48_r(
//         __buffer: *mut drand48_data,
//         __result: *mut ::std::os::raw::c_long,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn nrand48_r(
//         __xsubi: *mut ::std::os::raw::c_ushort,
//         __buffer: *mut drand48_data,
//         __result: *mut ::std::os::raw::c_long,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mrand48_r(
//         __buffer: *mut drand48_data,
//         __result: *mut ::std::os::raw::c_long,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn jrand48_r(
//         __xsubi: *mut ::std::os::raw::c_ushort,
//         __buffer: *mut drand48_data,
//         __result: *mut ::std::os::raw::c_long,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn srand48_r(
//         __seedval: ::std::os::raw::c_long,
//         __buffer: *mut drand48_data,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn seed48_r(
//         __seed16v: *mut ::std::os::raw::c_ushort,
//         __buffer: *mut drand48_data,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn lcong48_r(
//         __param: *mut ::std::os::raw::c_ushort,
//         __buffer: *mut drand48_data,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn malloc(__size: size_t) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn realloc(
//         __ptr: *mut ::std::os::raw::c_void,
//         __size: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn reallocarray(
//         __ptr: *mut ::std::os::raw::c_void,
//         __nmemb: size_t,
//         __size: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn free(__ptr: *mut ::std::os::raw::c_void);
// }
// extern "C" {
//     pub fn alloca(__size: size_t) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn valloc(__size: size_t) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn posix_memalign(
//         __memptr: *mut *mut ::std::os::raw::c_void,
//         __alignment: size_t,
//         __size: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn aligned_alloc(__alignment: size_t, __size: size_t) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn abort();
// }
// extern "C" {
//     pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn at_quick_exit(
//         __func: ::std::option::Option<unsafe extern "C" fn()>,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn on_exit(
//         __func: ::std::option::Option<
//             unsafe extern "C" fn(
//                 __status: ::std::os::raw::c_int,
//                 __arg: *mut ::std::os::raw::c_void,
//             ),
//         >,
//         __arg: *mut ::std::os::raw::c_void,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn exit(__status: ::std::os::raw::c_int);
// }
// extern "C" {
//     pub fn quick_exit(__status: ::std::os::raw::c_int);
// }
// extern "C" {
//     pub fn _Exit(__status: ::std::os::raw::c_int);
// }
// extern "C" {
//     pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn secure_getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn setenv(
//         __name: *const ::std::os::raw::c_char,
//         __value: *const ::std::os::raw::c_char,
//         __replace: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn clearenv() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mkstemp64(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mkstemps(
//         __template: *mut ::std::os::raw::c_char,
//         __suffixlen: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mkstemps64(
//         __template: *mut ::std::os::raw::c_char,
//         __suffixlen: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn mkostemp(
//         __template: *mut ::std::os::raw::c_char,
//         __flags: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mkostemp64(
//         __template: *mut ::std::os::raw::c_char,
//         __flags: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mkostemps(
//         __template: *mut ::std::os::raw::c_char,
//         __suffixlen: ::std::os::raw::c_int,
//         __flags: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mkostemps64(
//         __template: *mut ::std::os::raw::c_char,
//         __suffixlen: ::std::os::raw::c_int,
//         __flags: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn canonicalize_file_name(
//         __name: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn realpath(
//         __name: *const ::std::os::raw::c_char,
//         __resolved: *mut ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// pub type __compar_fn_t = ::std::option::Option<
//     unsafe extern "C" fn(
//         arg1: *const ::std::os::raw::c_void,
//         arg2: *const ::std::os::raw::c_void,
//     ) -> ::std::os::raw::c_int,
// >;
// pub type comparison_fn_t = __compar_fn_t;
// pub type __compar_d_fn_t = ::std::option::Option<
//     unsafe extern "C" fn(
//         arg1: *const ::std::os::raw::c_void,
//         arg2: *const ::std::os::raw::c_void,
//         arg3: *mut ::std::os::raw::c_void,
//     ) -> ::std::os::raw::c_int,
// >;
// extern "C" {
//     pub fn bsearch(
//         __key: *const ::std::os::raw::c_void,
//         __base: *const ::std::os::raw::c_void,
//         __nmemb: size_t,
//         __size: size_t,
//         __compar: __compar_fn_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn qsort(
//         __base: *mut ::std::os::raw::c_void,
//         __nmemb: size_t,
//         __size: size_t,
//         __compar: __compar_fn_t,
//     );
// }
// extern "C" {
//     pub fn qsort_r(
//         __base: *mut ::std::os::raw::c_void,
//         __nmemb: size_t,
//         __size: size_t,
//         __compar: __compar_d_fn_t,
//         __arg: *mut ::std::os::raw::c_void,
//     );
// }
// extern "C" {
//     pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
// }
// extern "C" {
//     pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
// }
// extern "C" {
//     pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
// }
// extern "C" {
//     pub fn lldiv(
//         __numer: ::std::os::raw::c_longlong,
//         __denom: ::std::os::raw::c_longlong,
//     ) -> lldiv_t;
// }
// extern "C" {
//     pub fn ecvt(
//         __value: f64,
//         __ndigit: ::std::os::raw::c_int,
//         __decpt: *mut ::std::os::raw::c_int,
//         __sign: *mut ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn fcvt(
//         __value: f64,
//         __ndigit: ::std::os::raw::c_int,
//         __decpt: *mut ::std::os::raw::c_int,
//         __sign: *mut ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn gcvt(
//         __value: f64,
//         __ndigit: ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn qecvt(
//         __value: u128,
//         __ndigit: ::std::os::raw::c_int,
//         __decpt: *mut ::std::os::raw::c_int,
//         __sign: *mut ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn qfcvt(
//         __value: u128,
//         __ndigit: ::std::os::raw::c_int,
//         __decpt: *mut ::std::os::raw::c_int,
//         __sign: *mut ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn qgcvt(
//         __value: u128,
//         __ndigit: ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn ecvt_r(
//         __value: f64,
//         __ndigit: ::std::os::raw::c_int,
//         __decpt: *mut ::std::os::raw::c_int,
//         __sign: *mut ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fcvt_r(
//         __value: f64,
//         __ndigit: ::std::os::raw::c_int,
//         __decpt: *mut ::std::os::raw::c_int,
//         __sign: *mut ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn qecvt_r(
//         __value: u128,
//         __ndigit: ::std::os::raw::c_int,
//         __decpt: *mut ::std::os::raw::c_int,
//         __sign: *mut ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn qfcvt_r(
//         __value: u128,
//         __ndigit: ::std::os::raw::c_int,
//         __decpt: *mut ::std::os::raw::c_int,
//         __sign: *mut ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//         __len: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mblen(__s: *const ::std::os::raw::c_char, __n: size_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mbtowc(
//         __pwc: *mut u32,
//         __s: *const ::std::os::raw::c_char,
//         __n: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: u32) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn mbstowcs(__pwcs: *mut u32, __s: *const ::std::os::raw::c_char, __n: size_t) -> size_t;
// }
// extern "C" {
//     pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const u32, __n: size_t) -> size_t;
// }
// extern "C" {
//     pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getsubopt(
//         __optionp: *mut *mut ::std::os::raw::c_char,
//         __tokens: *const *mut ::std::os::raw::c_char,
//         __valuep: *mut *mut ::std::os::raw::c_char,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn posix_openpt(__oflag: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn grantpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn unlockpt(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ptsname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn ptsname_r(
//         __fd: ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//         __buflen: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getpt() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
//         -> ::std::os::raw::c_int;
// }
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: size_t,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: size_t,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).read as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).write as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).seek as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_cookie_io_functions_t>())).close as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type fpos_t = __fpos_t;
pub type fpos64_t = __fpos64_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat2(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: size_t,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut size_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: size_t);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: size_t,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: size_t,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
// extern "C" {
//     pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getchar() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getchar_unlocked() -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
//         -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fgets(
//         __s: *mut ::std::os::raw::c_char,
//         __n: ::std::os::raw::c_int,
//         __stream: *mut FILE,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn fgets_unlocked(
//         __s: *mut ::std::os::raw::c_char,
//         __n: ::std::os::raw::c_int,
//         __stream: *mut FILE,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn __getdelim(
//         __lineptr: *mut *mut ::std::os::raw::c_char,
//         __n: *mut size_t,
//         __delimiter: ::std::os::raw::c_int,
//         __stream: *mut FILE,
//     ) -> __ssize_t;
// }
// extern "C" {
//     pub fn getdelim(
//         __lineptr: *mut *mut ::std::os::raw::c_char,
//         __n: *mut size_t,
//         __delimiter: ::std::os::raw::c_int,
//         __stream: *mut FILE,
//     ) -> __ssize_t;
// }
// extern "C" {
//     pub fn getline(
//         __lineptr: *mut *mut ::std::os::raw::c_char,
//         __n: *mut size_t,
//         __stream: *mut FILE,
//     ) -> __ssize_t;
// }
// extern "C" {
//     pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fread(
//         __ptr: *mut ::std::os::raw::c_void,
//         __size: size_t,
//         __n: size_t,
//         __stream: *mut FILE,
//     ) -> size_t;
// }
// extern "C" {
//     pub fn fwrite(
//         __ptr: *const ::std::os::raw::c_void,
//         __size: size_t,
//         __n: size_t,
//         __s: *mut FILE,
//     ) -> size_t;
// }
// extern "C" {
//     pub fn fputs_unlocked(
//         __s: *const ::std::os::raw::c_char,
//         __stream: *mut FILE,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fread_unlocked(
//         __ptr: *mut ::std::os::raw::c_void,
//         __size: size_t,
//         __n: size_t,
//         __stream: *mut FILE,
//     ) -> size_t;
// }
// extern "C" {
//     pub fn fwrite_unlocked(
//         __ptr: *const ::std::os::raw::c_void,
//         __size: size_t,
//         __n: size_t,
//         __stream: *mut FILE,
//     ) -> size_t;
// }
// extern "C" {
//     pub fn fseek(
//         __stream: *mut FILE,
//         __off: ::std::os::raw::c_long,
//         __whence: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
// }
// extern "C" {
//     pub fn rewind(__stream: *mut FILE);
// }
// extern "C" {
//     pub fn fseeko(
//         __stream: *mut FILE,
//         __off: __off_t,
//         __whence: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ftello(__stream: *mut FILE) -> __off_t;
// }
// extern "C" {
//     pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fseeko64(
//         __stream: *mut FILE,
//         __off: __off64_t,
//         __whence: ::std::os::raw::c_int,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ftello64(__stream: *mut FILE) -> __off64_t;
// }
// extern "C" {
//     pub fn fgetpos64(__stream: *mut FILE, __pos: *mut fpos64_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fsetpos64(__stream: *mut FILE, __pos: *const fpos64_t) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn clearerr(__stream: *mut FILE);
// }
// extern "C" {
//     pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn clearerr_unlocked(__stream: *mut FILE);
// }
// extern "C" {
//     pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn perror(__s: *const ::std::os::raw::c_char);
// }
// extern "C" {
//     pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn popen(
//         __command: *const ::std::os::raw::c_char,
//         __modes: *const ::std::os::raw::c_char,
//     ) -> *mut FILE;
// }
// extern "C" {
//     pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn cuserid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
// #[repr(C)]
// #[derive(Debug, Copy, Clone)]
// pub struct obstack {
//     _unused: [u8; 0],
// }
// extern "C" {
//     pub fn obstack_printf(
//         __obstack: *mut obstack,
//         __format: *const ::std::os::raw::c_char,
//         ...
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn obstack_vprintf(
//         __obstack: *mut obstack,
//         __format: *const ::std::os::raw::c_char,
//         __args: *mut __va_list_tag,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn flockfile(__stream: *mut FILE);
// }
// extern "C" {
//     pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn funlockfile(__stream: *mut FILE);
// }
// extern "C" {
//     pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn memcpy(
//         __dest: *mut ::std::os::raw::c_void,
//         __src: *const ::std::os::raw::c_void,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn memmove(
//         __dest: *mut ::std::os::raw::c_void,
//         __src: *const ::std::os::raw::c_void,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn memccpy(
//         __dest: *mut ::std::os::raw::c_void,
//         __src: *const ::std::os::raw::c_void,
//         __c: ::std::os::raw::c_int,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn memset(
//         __s: *mut ::std::os::raw::c_void,
//         __c: ::std::os::raw::c_int,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn memcmp(
//         __s1: *const ::std::os::raw::c_void,
//         __s2: *const ::std::os::raw::c_void,
//         __n: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn memchr(
//         __s: *mut ::std::os::raw::c_void,
//         __c: ::std::os::raw::c_int,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn rawmemchr(
//         __s: *mut ::std::os::raw::c_void,
//         __c: ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn memrchr(
//         __s: *mut ::std::os::raw::c_void,
//         __c: ::std::os::raw::c_int,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn strcpy(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strncpy(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strcat(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strncat(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strcmp(
//         __s1: *const ::std::os::raw::c_char,
//         __s2: *const ::std::os::raw::c_char,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strncmp(
//         __s1: *const ::std::os::raw::c_char,
//         __s2: *const ::std::os::raw::c_char,
//         __n: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strcoll(
//         __s1: *const ::std::os::raw::c_char,
//         __s2: *const ::std::os::raw::c_char,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strxfrm(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//         __n: size_t,
//     ) -> size_t;
// }
// extern "C" {
//     pub fn strcoll_l(
//         __s1: *const ::std::os::raw::c_char,
//         __s2: *const ::std::os::raw::c_char,
//         __l: locale_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strxfrm_l(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//         __n: size_t,
//         __l: locale_t,
//     ) -> size_t;
// }
// extern "C" {
//     pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strndup(
//         __string: *const ::std::os::raw::c_char,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strchr(
//         __s: *mut ::std::os::raw::c_char,
//         __c: ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strrchr(
//         __s: *mut ::std::os::raw::c_char,
//         __c: ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strchrnul(
//         __s: *mut ::std::os::raw::c_char,
//         __c: ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strcspn(
//         __s: *const ::std::os::raw::c_char,
//         __reject: *const ::std::os::raw::c_char,
//     ) -> size_t;
// }
// extern "C" {
//     pub fn strspn(
//         __s: *const ::std::os::raw::c_char,
//         __accept: *const ::std::os::raw::c_char,
//     ) -> size_t;
// }
// extern "C" {
//     pub fn strpbrk(
//         __s: *mut ::std::os::raw::c_char,
//         __accept: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strstr(
//         __haystack: *mut ::std::os::raw::c_char,
//         __needle: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strtok(
//         __s: *mut ::std::os::raw::c_char,
//         __delim: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn __strtok_r(
//         __s: *mut ::std::os::raw::c_char,
//         __delim: *const ::std::os::raw::c_char,
//         __save_ptr: *mut *mut ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strtok_r(
//         __s: *mut ::std::os::raw::c_char,
//         __delim: *const ::std::os::raw::c_char,
//         __save_ptr: *mut *mut ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strcasestr(
//         __haystack: *mut ::std::os::raw::c_char,
//         __needle: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn memmem(
//         __haystack: *const ::std::os::raw::c_void,
//         __haystacklen: size_t,
//         __needle: *const ::std::os::raw::c_void,
//         __needlelen: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn __mempcpy(
//         __dest: *mut ::std::os::raw::c_void,
//         __src: *const ::std::os::raw::c_void,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn mempcpy(
//         __dest: *mut ::std::os::raw::c_void,
//         __src: *const ::std::os::raw::c_void,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn strlen(__s: *const ::std::os::raw::c_char) -> size_t;
// }
// extern "C" {
//     pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: size_t) -> size_t;
// }
// extern "C" {
//     pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strerror_r(
//         __errnum: ::std::os::raw::c_int,
//         __buf: *mut ::std::os::raw::c_char,
//         __buflen: size_t,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strerrordesc_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strerrorname_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strerror_l(
//         __errnum: ::std::os::raw::c_int,
//         __l: locale_t,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn bcmp(
//         __s1: *const ::std::os::raw::c_void,
//         __s2: *const ::std::os::raw::c_void,
//         __n: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn bcopy(
//         __src: *const ::std::os::raw::c_void,
//         __dest: *mut ::std::os::raw::c_void,
//         __n: size_t,
//     );
// }
// extern "C" {
//     pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
// }
// extern "C" {
//     pub fn index(
//         __s: *const ::std::os::raw::c_char,
//         __c: ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn rindex(
//         __s: *const ::std::os::raw::c_char,
//         __c: ::std::os::raw::c_int,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strcasecmp(
//         __s1: *const ::std::os::raw::c_char,
//         __s2: *const ::std::os::raw::c_char,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strncasecmp(
//         __s1: *const ::std::os::raw::c_char,
//         __s2: *const ::std::os::raw::c_char,
//         __n: size_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strcasecmp_l(
//         __s1: *const ::std::os::raw::c_char,
//         __s2: *const ::std::os::raw::c_char,
//         __loc: locale_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strncasecmp_l(
//         __s1: *const ::std::os::raw::c_char,
//         __s2: *const ::std::os::raw::c_char,
//         __n: size_t,
//         __loc: locale_t,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: size_t);
// }
// extern "C" {
//     pub fn strsep(
//         __stringp: *mut *mut ::std::os::raw::c_char,
//         __delim: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn sigabbrev_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn sigdescr_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn __stpcpy(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn stpcpy(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn __stpncpy(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn stpncpy(
//         __dest: *mut ::std::os::raw::c_char,
//         __src: *const ::std::os::raw::c_char,
//         __n: size_t,
//     ) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn strverscmp(
//         __s1: *const ::std::os::raw::c_char,
//         __s2: *const ::std::os::raw::c_char,
//     ) -> ::std::os::raw::c_int;
// }
// extern "C" {
//     pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
// extern "C" {
//     pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: size_t) -> *mut ::std::os::raw::c_void;
// }
// extern "C" {
//     pub fn basename(__filename: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
// }
pub const _ISupper: _bindgen_ty_4 = 256;
pub const _ISlower: _bindgen_ty_4 = 512;
pub const _ISalpha: _bindgen_ty_4 = 1024;
pub const _ISdigit: _bindgen_ty_4 = 2048;
pub const _ISxdigit: _bindgen_ty_4 = 4096;
pub const _ISspace: _bindgen_ty_4 = 8192;
pub const _ISprint: _bindgen_ty_4 = 16384;
pub const _ISgraph: _bindgen_ty_4 = 32768;
pub const _ISblank: _bindgen_ty_4 = 1;
pub const _IScntrl: _bindgen_ty_4 = 2;
pub const _ISpunct: _bindgen_ty_4 = 4;
pub const _ISalnum: _bindgen_ty_4 = 8;
pub type _bindgen_ty_4 = u32;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isctype(
        __c: ::std::os::raw::c_int,
        __mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub static mut program_invocation_name: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut program_invocation_short_name: *mut ::std::os::raw::c_char;
}
pub type error_t = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type USHORT = ::std::os::raw::c_ushort;
pub type LONG = ::std::os::raw::c_int;
pub type DWORD = ::std::os::raw::c_uint;
pub type DWORD_PTR = ::std::os::raw::c_ulong;
pub type LONG_PTR = ::std::os::raw::c_long;
pub type INT_PTR = ::std::os::raw::c_long;
pub type LONGLONG = ::std::os::raw::c_longlong;
pub type ULONGLONG = ::std::os::raw::c_ulonglong;
pub type HANDLE = *mut ::std::os::raw::c_void;
pub type LPOVERLAPPED = *mut ::std::os::raw::c_void;
pub type TCHAR = ::std::os::raw::c_char;
pub type LCID = ::std::os::raw::c_uint;
pub type PLONG = *mut LONG;
pub type LPDWORD = *mut DWORD;
pub type LPBYTE = *mut BYTE;
pub type LPCTSTR = *const ::std::os::raw::c_char;
pub type LPCSTR = *const ::std::os::raw::c_char;
pub type LPTSTR = *mut ::std::os::raw::c_char;
pub type LPSTR = *mut ::std::os::raw::c_char;
pub type HASH_STRING = ::std::option::Option<
    unsafe extern "C" fn(szFileName: *const ::std::os::raw::c_char, dwHashType: DWORD) -> DWORD,
>;
pub const _SFileInfoClass_SFileMpqFileName: _SFileInfoClass = 0;
pub const _SFileInfoClass_SFileMpqStreamBitmap: _SFileInfoClass = 1;
pub const _SFileInfoClass_SFileMpqUserDataOffset: _SFileInfoClass = 2;
pub const _SFileInfoClass_SFileMpqUserDataHeader: _SFileInfoClass = 3;
pub const _SFileInfoClass_SFileMpqUserData: _SFileInfoClass = 4;
pub const _SFileInfoClass_SFileMpqHeaderOffset: _SFileInfoClass = 5;
pub const _SFileInfoClass_SFileMpqHeaderSize: _SFileInfoClass = 6;
pub const _SFileInfoClass_SFileMpqHeader: _SFileInfoClass = 7;
pub const _SFileInfoClass_SFileMpqHetTableOffset: _SFileInfoClass = 8;
pub const _SFileInfoClass_SFileMpqHetTableSize: _SFileInfoClass = 9;
pub const _SFileInfoClass_SFileMpqHetHeader: _SFileInfoClass = 10;
pub const _SFileInfoClass_SFileMpqHetTable: _SFileInfoClass = 11;
pub const _SFileInfoClass_SFileMpqBetTableOffset: _SFileInfoClass = 12;
pub const _SFileInfoClass_SFileMpqBetTableSize: _SFileInfoClass = 13;
pub const _SFileInfoClass_SFileMpqBetHeader: _SFileInfoClass = 14;
pub const _SFileInfoClass_SFileMpqBetTable: _SFileInfoClass = 15;
pub const _SFileInfoClass_SFileMpqHashTableOffset: _SFileInfoClass = 16;
pub const _SFileInfoClass_SFileMpqHashTableSize64: _SFileInfoClass = 17;
pub const _SFileInfoClass_SFileMpqHashTableSize: _SFileInfoClass = 18;
pub const _SFileInfoClass_SFileMpqHashTable: _SFileInfoClass = 19;
pub const _SFileInfoClass_SFileMpqBlockTableOffset: _SFileInfoClass = 20;
pub const _SFileInfoClass_SFileMpqBlockTableSize64: _SFileInfoClass = 21;
pub const _SFileInfoClass_SFileMpqBlockTableSize: _SFileInfoClass = 22;
pub const _SFileInfoClass_SFileMpqBlockTable: _SFileInfoClass = 23;
pub const _SFileInfoClass_SFileMpqHiBlockTableOffset: _SFileInfoClass = 24;
pub const _SFileInfoClass_SFileMpqHiBlockTableSize64: _SFileInfoClass = 25;
pub const _SFileInfoClass_SFileMpqHiBlockTable: _SFileInfoClass = 26;
pub const _SFileInfoClass_SFileMpqSignatures: _SFileInfoClass = 27;
pub const _SFileInfoClass_SFileMpqStrongSignatureOffset: _SFileInfoClass = 28;
pub const _SFileInfoClass_SFileMpqStrongSignatureSize: _SFileInfoClass = 29;
pub const _SFileInfoClass_SFileMpqStrongSignature: _SFileInfoClass = 30;
pub const _SFileInfoClass_SFileMpqArchiveSize64: _SFileInfoClass = 31;
pub const _SFileInfoClass_SFileMpqArchiveSize: _SFileInfoClass = 32;
pub const _SFileInfoClass_SFileMpqMaxFileCount: _SFileInfoClass = 33;
pub const _SFileInfoClass_SFileMpqFileTableSize: _SFileInfoClass = 34;
pub const _SFileInfoClass_SFileMpqSectorSize: _SFileInfoClass = 35;
pub const _SFileInfoClass_SFileMpqNumberOfFiles: _SFileInfoClass = 36;
pub const _SFileInfoClass_SFileMpqRawChunkSize: _SFileInfoClass = 37;
pub const _SFileInfoClass_SFileMpqStreamFlags: _SFileInfoClass = 38;
pub const _SFileInfoClass_SFileMpqFlags: _SFileInfoClass = 39;
pub const _SFileInfoClass_SFileInfoPatchChain: _SFileInfoClass = 40;
pub const _SFileInfoClass_SFileInfoFileEntry: _SFileInfoClass = 41;
pub const _SFileInfoClass_SFileInfoHashEntry: _SFileInfoClass = 42;
pub const _SFileInfoClass_SFileInfoHashIndex: _SFileInfoClass = 43;
pub const _SFileInfoClass_SFileInfoNameHash1: _SFileInfoClass = 44;
pub const _SFileInfoClass_SFileInfoNameHash2: _SFileInfoClass = 45;
pub const _SFileInfoClass_SFileInfoNameHash3: _SFileInfoClass = 46;
pub const _SFileInfoClass_SFileInfoLocale: _SFileInfoClass = 47;
pub const _SFileInfoClass_SFileInfoFileIndex: _SFileInfoClass = 48;
pub const _SFileInfoClass_SFileInfoByteOffset: _SFileInfoClass = 49;
pub const _SFileInfoClass_SFileInfoFileTime: _SFileInfoClass = 50;
pub const _SFileInfoClass_SFileInfoFileSize: _SFileInfoClass = 51;
pub const _SFileInfoClass_SFileInfoCompressedSize: _SFileInfoClass = 52;
pub const _SFileInfoClass_SFileInfoFlags: _SFileInfoClass = 53;
pub const _SFileInfoClass_SFileInfoEncryptionKey: _SFileInfoClass = 54;
pub const _SFileInfoClass_SFileInfoEncryptionKeyRaw: _SFileInfoClass = 55;
pub const _SFileInfoClass_SFileInfoCRC32: _SFileInfoClass = 56;
pub type _SFileInfoClass = u32;
pub use self::_SFileInfoClass as SFileInfoClass;
pub type SFILE_DOWNLOAD_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvUserData: *mut ::std::os::raw::c_void,
        ByteOffset: ULONGLONG,
        dwTotalBytes: DWORD,
    ),
>;
pub type SFILE_ADDFILE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvUserData: *mut ::std::os::raw::c_void,
        dwBytesWritten: DWORD,
        dwTotalBytes: DWORD,
        bFinalCall: bool,
    ),
>;
pub type SFILE_COMPACT_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvUserData: *mut ::std::os::raw::c_void,
        dwWorkType: DWORD,
        BytesProcessed: ULONGLONG,
        TotalBytes: ULONGLONG,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TFileStream {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TMPQBits {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQUserData {
    pub dwID: DWORD,
    pub cbUserDataSize: DWORD,
    pub dwHeaderOffs: DWORD,
    pub cbUserDataHeader: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQUserData() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQUserData>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQUserData))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQUserData>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQUserData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQUserData>())).dwID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQUserData),
            "::",
            stringify!(dwID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQUserData>())).cbUserDataSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQUserData),
            "::",
            stringify!(cbUserDataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQUserData>())).dwHeaderOffs as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQUserData),
            "::",
            stringify!(dwHeaderOffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQUserData>())).cbUserDataHeader as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQUserData),
            "::",
            stringify!(cbUserDataHeader)
        )
    );
}
pub type TMPQUserData = _TMPQUserData;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHeader {
    pub dwID: DWORD,
    pub dwHeaderSize: DWORD,
    pub dwArchiveSize: DWORD,
    pub wFormatVersion: USHORT,
    pub wSectorSize: USHORT,
    pub dwHashTablePos: DWORD,
    pub dwBlockTablePos: DWORD,
    pub dwHashTableSize: DWORD,
    pub dwBlockTableSize: DWORD,
    pub HiBlockTablePos64: ULONGLONG,
    pub wHashTablePosHi: USHORT,
    pub wBlockTablePosHi: USHORT,
    pub ArchiveSize64: ULONGLONG,
    pub BetTablePos64: ULONGLONG,
    pub HetTablePos64: ULONGLONG,
    pub HashTableSize64: ULONGLONG,
    pub BlockTableSize64: ULONGLONG,
    pub HiBlockTableSize64: ULONGLONG,
    pub HetTableSize64: ULONGLONG,
    pub BetTableSize64: ULONGLONG,
    pub dwRawChunkSize: DWORD,
    pub MD5_BlockTable: [::std::os::raw::c_uchar; 16usize],
    pub MD5_HashTable: [::std::os::raw::c_uchar; 16usize],
    pub MD5_HiBlockTable: [::std::os::raw::c_uchar; 16usize],
    pub MD5_BetTable: [::std::os::raw::c_uchar; 16usize],
    pub MD5_HetTable: [::std::os::raw::c_uchar; 16usize],
    pub MD5_MpqHeader: [::std::os::raw::c_uchar; 16usize],
}
#[test]
fn bindgen_test_layout__TMPQHeader() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQHeader>(),
        208usize,
        concat!("Size of: ", stringify!(_TMPQHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQHeader>(),
        1usize,
        concat!("Alignment of ", stringify!(_TMPQHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwID as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwHeaderSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwHeaderSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwArchiveSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwArchiveSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).wFormatVersion as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(wFormatVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).wSectorSize as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(wSectorSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwHashTablePos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwHashTablePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwBlockTablePos as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwBlockTablePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwHashTableSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwHashTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwBlockTableSize as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwBlockTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HiBlockTablePos64 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HiBlockTablePos64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).wHashTablePosHi as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(wHashTablePosHi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).wBlockTablePosHi as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(wBlockTablePosHi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).ArchiveSize64 as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(ArchiveSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).BetTablePos64 as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(BetTablePos64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HetTablePos64 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HetTablePos64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HashTableSize64 as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HashTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).BlockTableSize64 as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(BlockTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HiBlockTableSize64 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HiBlockTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).HetTableSize64 as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(HetTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).BetTableSize64 as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(BetTableSize64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).dwRawChunkSize as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(dwRawChunkSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_BlockTable as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_BlockTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_HashTable as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_HashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_HiBlockTable as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_HiBlockTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_BetTable as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_BetTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_HetTable as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_HetTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHeader>())).MD5_MpqHeader as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHeader),
            "::",
            stringify!(MD5_MpqHeader)
        )
    );
}
pub type TMPQHeader = _TMPQHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHash {
    pub dwName1: DWORD,
    pub dwName2: DWORD,
    pub lcLocale: USHORT,
    pub Platform: BYTE,
    pub Reserved: BYTE,
    pub dwBlockIndex: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQHash() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQHash>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQHash))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQHash>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQHash))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).dwName1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(dwName1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).dwName2 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(dwName2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).lcLocale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(lcLocale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).Platform as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(Platform)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).Reserved as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(Reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHash>())).dwBlockIndex as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHash),
            "::",
            stringify!(dwBlockIndex)
        )
    );
}
pub type TMPQHash = _TMPQHash;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQBlock {
    pub dwFilePos: DWORD,
    pub dwCSize: DWORD,
    pub dwFSize: DWORD,
    pub dwFlags: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQBlock() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQBlock>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQBlock>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBlock>())).dwFilePos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBlock),
            "::",
            stringify!(dwFilePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBlock>())).dwCSize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBlock),
            "::",
            stringify!(dwCSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBlock>())).dwFSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBlock),
            "::",
            stringify!(dwFSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBlock>())).dwFlags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBlock),
            "::",
            stringify!(dwFlags)
        )
    );
}
pub type TMPQBlock = _TMPQBlock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TPatchInfo {
    pub dwLength: DWORD,
    pub dwFlags: DWORD,
    pub dwDataSize: DWORD,
    pub md5: [BYTE; 16usize],
}
#[test]
fn bindgen_test_layout__TPatchInfo() {
    assert_eq!(
        ::std::mem::size_of::<_TPatchInfo>(),
        28usize,
        concat!("Size of: ", stringify!(_TPatchInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<_TPatchInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(_TPatchInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TPatchInfo>())).dwLength as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TPatchInfo),
            "::",
            stringify!(dwLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TPatchInfo>())).dwFlags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TPatchInfo),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TPatchInfo>())).dwDataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TPatchInfo),
            "::",
            stringify!(dwDataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TPatchInfo>())).md5 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TPatchInfo),
            "::",
            stringify!(md5)
        )
    );
}
pub type TPatchInfo = _TPatchInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TFileEntry {
    pub FileNameHash: ULONGLONG,
    pub ByteOffset: ULONGLONG,
    pub FileTime: ULONGLONG,
    pub dwFileSize: DWORD,
    pub dwCmpSize: DWORD,
    pub dwFlags: DWORD,
    pub dwCrc32: DWORD,
    pub md5: [BYTE; 16usize],
    pub szFileName: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__TFileEntry() {
    assert_eq!(
        ::std::mem::size_of::<_TFileEntry>(),
        64usize,
        concat!("Size of: ", stringify!(_TFileEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_TFileEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_TFileEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).FileNameHash as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(FileNameHash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).ByteOffset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(ByteOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).FileTime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(FileTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).dwFileSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(dwFileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).dwCmpSize as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(dwCmpSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).dwFlags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).dwCrc32 as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(dwCrc32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).md5 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TFileEntry>())).szFileName as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TFileEntry),
            "::",
            stringify!(szFileName)
        )
    );
}
pub type TFileEntry = _TFileEntry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQExtHeader {
    pub dwSignature: DWORD,
    pub dwVersion: DWORD,
    pub dwDataSize: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQExtHeader() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQExtHeader>(),
        12usize,
        concat!("Size of: ", stringify!(_TMPQExtHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQExtHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQExtHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQExtHeader>())).dwSignature as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQExtHeader),
            "::",
            stringify!(dwSignature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQExtHeader>())).dwVersion as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQExtHeader),
            "::",
            stringify!(dwVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQExtHeader>())).dwDataSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQExtHeader),
            "::",
            stringify!(dwDataSize)
        )
    );
}
pub type TMPQExtHeader = _TMPQExtHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHetHeader {
    pub ExtHdr: TMPQExtHeader,
    pub dwTableSize: DWORD,
    pub dwEntryCount: DWORD,
    pub dwTotalCount: DWORD,
    pub dwNameHashBitSize: DWORD,
    pub dwIndexSizeTotal: DWORD,
    pub dwIndexSizeExtra: DWORD,
    pub dwIndexSize: DWORD,
    pub dwIndexTableSize: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQHetHeader() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQHetHeader>(),
        44usize,
        concat!("Size of: ", stringify!(_TMPQHetHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQHetHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQHetHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).ExtHdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(ExtHdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwTableSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwEntryCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwEntryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwTotalCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwTotalCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQHetHeader>())).dwNameHashBitSize as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwNameHashBitSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwIndexSizeTotal as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwIndexSizeTotal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwIndexSizeExtra as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwIndexSizeExtra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwIndexSize as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwIndexSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetHeader>())).dwIndexTableSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetHeader),
            "::",
            stringify!(dwIndexTableSize)
        )
    );
}
pub type TMPQHetHeader = _TMPQHetHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQBetHeader {
    pub ExtHdr: TMPQExtHeader,
    pub dwTableSize: DWORD,
    pub dwEntryCount: DWORD,
    pub dwUnknown08: DWORD,
    pub dwTableEntrySize: DWORD,
    pub dwBitIndex_FilePos: DWORD,
    pub dwBitIndex_FileSize: DWORD,
    pub dwBitIndex_CmpSize: DWORD,
    pub dwBitIndex_FlagIndex: DWORD,
    pub dwBitIndex_Unknown: DWORD,
    pub dwBitCount_FilePos: DWORD,
    pub dwBitCount_FileSize: DWORD,
    pub dwBitCount_CmpSize: DWORD,
    pub dwBitCount_FlagIndex: DWORD,
    pub dwBitCount_Unknown: DWORD,
    pub dwBitTotal_NameHash2: DWORD,
    pub dwBitExtra_NameHash2: DWORD,
    pub dwBitCount_NameHash2: DWORD,
    pub dwNameHashArraySize: DWORD,
    pub dwFlagCount: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQBetHeader() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQBetHeader>(),
        88usize,
        concat!("Size of: ", stringify!(_TMPQBetHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQBetHeader>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQBetHeader))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).ExtHdr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(ExtHdr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwTableSize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwEntryCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwEntryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwUnknown08 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwUnknown08)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwTableEntrySize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwTableEntrySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_FilePos as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_FilePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_FileSize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_FileSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_CmpSize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_CmpSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_FlagIndex as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_FlagIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitIndex_Unknown as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitIndex_Unknown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_FilePos as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_FilePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_FileSize as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_FileSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_CmpSize as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_CmpSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_FlagIndex as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_FlagIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_Unknown as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_Unknown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitTotal_NameHash2 as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitTotal_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitExtra_NameHash2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitExtra_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwBitCount_NameHash2 as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwBitCount_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetHeader>())).dwNameHashArraySize as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwNameHashArraySize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetHeader>())).dwFlagCount as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetHeader),
            "::",
            stringify!(dwFlagCount)
        )
    );
}
pub type TMPQBetHeader = _TMPQBetHeader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQHetTable {
    pub pBetIndexes: *mut TMPQBits,
    pub pNameHashes: LPBYTE,
    pub AndMask64: ULONGLONG,
    pub OrMask64: ULONGLONG,
    pub dwEntryCount: DWORD,
    pub dwTotalCount: DWORD,
    pub dwNameHashBitSize: DWORD,
    pub dwIndexSizeTotal: DWORD,
    pub dwIndexSizeExtra: DWORD,
    pub dwIndexSize: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQHetTable() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQHetTable>(),
        56usize,
        concat!("Size of: ", stringify!(_TMPQHetTable))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQHetTable>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQHetTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).pBetIndexes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(pBetIndexes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).pNameHashes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(pNameHashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).AndMask64 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(AndMask64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).OrMask64 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(OrMask64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwEntryCount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwEntryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwTotalCount as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwTotalCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwNameHashBitSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwNameHashBitSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwIndexSizeTotal as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwIndexSizeTotal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwIndexSizeExtra as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwIndexSizeExtra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQHetTable>())).dwIndexSize as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQHetTable),
            "::",
            stringify!(dwIndexSize)
        )
    );
}
pub type TMPQHetTable = _TMPQHetTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQBetTable {
    pub pNameHashes: *mut TMPQBits,
    pub pFileTable: *mut TMPQBits,
    pub pFileFlags: LPDWORD,
    pub dwTableEntrySize: DWORD,
    pub dwBitIndex_FilePos: DWORD,
    pub dwBitIndex_FileSize: DWORD,
    pub dwBitIndex_CmpSize: DWORD,
    pub dwBitIndex_FlagIndex: DWORD,
    pub dwBitIndex_Unknown: DWORD,
    pub dwBitCount_FilePos: DWORD,
    pub dwBitCount_FileSize: DWORD,
    pub dwBitCount_CmpSize: DWORD,
    pub dwBitCount_FlagIndex: DWORD,
    pub dwBitCount_Unknown: DWORD,
    pub dwBitTotal_NameHash2: DWORD,
    pub dwBitExtra_NameHash2: DWORD,
    pub dwBitCount_NameHash2: DWORD,
    pub dwEntryCount: DWORD,
    pub dwFlagCount: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQBetTable() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQBetTable>(),
        88usize,
        concat!("Size of: ", stringify!(_TMPQBetTable))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQBetTable>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQBetTable))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).pNameHashes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(pNameHashes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).pFileTable as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(pFileTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).pFileFlags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(pFileFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).dwTableEntrySize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwTableEntrySize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_FilePos as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_FilePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_FileSize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_FileSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_CmpSize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_CmpSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_FlagIndex as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_FlagIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitIndex_Unknown as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitIndex_Unknown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_FilePos as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_FilePos)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_FileSize as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_FileSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_CmpSize as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_CmpSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_FlagIndex as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_FlagIndex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_Unknown as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_Unknown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitTotal_NameHash2 as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitTotal_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitExtra_NameHash2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitExtra_NameHash2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQBetTable>())).dwBitCount_NameHash2 as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwBitCount_NameHash2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).dwEntryCount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwEntryCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQBetTable>())).dwFlagCount as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQBetTable),
            "::",
            stringify!(dwFlagCount)
        )
    );
}
pub type TMPQBetTable = _TMPQBetTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQNamePrefix {
    pub nLength: size_t,
    pub szPatchPrefix: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout__TMPQNamePrefix() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQNamePrefix>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQNamePrefix))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQNamePrefix>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQNamePrefix))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNamePrefix>())).nLength as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNamePrefix),
            "::",
            stringify!(nLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNamePrefix>())).szPatchPrefix as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNamePrefix),
            "::",
            stringify!(szPatchPrefix)
        )
    );
}
pub type TMPQNamePrefix = _TMPQNamePrefix;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TMPQNameCache {
    pub FirstNameOffset: DWORD,
    pub FreeSpaceOffset: DWORD,
    pub TotalCacheSize: DWORD,
    pub SearchOffset: DWORD,
}
#[test]
fn bindgen_test_layout__TMPQNameCache() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQNameCache>(),
        16usize,
        concat!("Size of: ", stringify!(_TMPQNameCache))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQNameCache>(),
        4usize,
        concat!("Alignment of ", stringify!(_TMPQNameCache))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNameCache>())).FirstNameOffset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNameCache),
            "::",
            stringify!(FirstNameOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNameCache>())).FreeSpaceOffset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNameCache),
            "::",
            stringify!(FreeSpaceOffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNameCache>())).TotalCacheSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNameCache),
            "::",
            stringify!(TotalCacheSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQNameCache>())).SearchOffset as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQNameCache),
            "::",
            stringify!(SearchOffset)
        )
    );
}
pub type TMPQNameCache = _TMPQNameCache;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TMPQArchive {
    pub pStream: *mut TFileStream,
    pub UserDataPos: ULONGLONG,
    pub MpqPos: ULONGLONG,
    pub FileSize: ULONGLONG,
    pub haPatch: *mut _TMPQArchive,
    pub haBase: *mut _TMPQArchive,
    pub pPatchPrefix: *mut TMPQNamePrefix,
    pub pUserData: *mut TMPQUserData,
    pub pHeader: *mut TMPQHeader,
    pub pHashTable: *mut TMPQHash,
    pub pHetTable: *mut TMPQHetTable,
    pub pFileTable: *mut TFileEntry,
    pub pfnHashString: HASH_STRING,
    pub UserData: TMPQUserData,
    pub HeaderData: [DWORD; 52usize],
    pub dwHETBlockSize: DWORD,
    pub dwBETBlockSize: DWORD,
    pub dwMaxFileCount: DWORD,
    pub dwFileTableSize: DWORD,
    pub dwReservedFiles: DWORD,
    pub dwSectorSize: DWORD,
    pub dwFileFlags1: DWORD,
    pub dwFileFlags2: DWORD,
    pub dwFileFlags3: DWORD,
    pub dwAttrFlags: DWORD,
    pub dwFlags: DWORD,
    pub dwSubType: DWORD,
    pub pfnAddFileCB: SFILE_ADDFILE_CALLBACK,
    pub pvAddFileUserData: *mut ::std::os::raw::c_void,
    pub pfnCompactCB: SFILE_COMPACT_CALLBACK,
    pub CompactBytesProcessed: ULONGLONG,
    pub CompactTotalBytes: ULONGLONG,
    pub pvCompactUserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__TMPQArchive() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQArchive>(),
        424usize,
        concat!("Size of: ", stringify!(_TMPQArchive))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQArchive>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQArchive))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pStream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pStream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).UserDataPos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(UserDataPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).MpqPos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(MpqPos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).FileSize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(FileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).haPatch as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(haPatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).haBase as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(haBase)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pPatchPrefix as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pPatchPrefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pUserData as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pHeader as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pHeader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pHashTable as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pHashTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pHetTable as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pHetTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pFileTable as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pFileTable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pfnHashString as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pfnHashString)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).UserData as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).HeaderData as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(HeaderData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwHETBlockSize as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwHETBlockSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwBETBlockSize as *const _ as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwBETBlockSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwMaxFileCount as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwMaxFileCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFileTableSize as *const _ as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFileTableSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwReservedFiles as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwReservedFiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwSectorSize as *const _ as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwSectorSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFileFlags1 as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFileFlags1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFileFlags2 as *const _ as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFileFlags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFileFlags3 as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFileFlags3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwAttrFlags as *const _ as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwAttrFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwFlags as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).dwSubType as *const _ as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(dwSubType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pfnAddFileCB as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pfnAddFileCB)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pvAddFileUserData as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pvAddFileUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pfnCompactCB as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pfnCompactCB)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_TMPQArchive>())).CompactBytesProcessed as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(CompactBytesProcessed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).CompactTotalBytes as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(CompactTotalBytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQArchive>())).pvCompactUserData as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQArchive),
            "::",
            stringify!(pvCompactUserData)
        )
    );
}
pub type TMPQArchive = _TMPQArchive;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TMPQFile {
    pub pStream: *mut TFileStream,
    pub ha: *mut TMPQArchive,
    pub pHashEntry: *mut TMPQHash,
    pub pFileEntry: *mut TFileEntry,
    pub RawFilePos: ULONGLONG,
    pub MpqFilePos: ULONGLONG,
    pub dwHashIndex: DWORD,
    pub dwFileKey: DWORD,
    pub dwFilePos: DWORD,
    pub dwMagic: DWORD,
    pub hfPatch: *mut _TMPQFile,
    pub pPatchInfo: *mut TPatchInfo,
    pub SectorOffsets: LPDWORD,
    pub SectorChksums: LPDWORD,
    pub pbFileData: LPBYTE,
    pub cbFileData: DWORD,
    pub dwCompression0: DWORD,
    pub dwSectorCount: DWORD,
    pub dwPatchedFileSize: DWORD,
    pub dwDataSize: DWORD,
    pub pbFileSector: LPBYTE,
    pub dwSectorOffs: DWORD,
    pub dwSectorSize: DWORD,
    pub hctx: [::std::os::raw::c_uchar; 96usize],
    pub dwCrc32: DWORD,
    pub nAddFileError: ::std::os::raw::c_int,
    pub bLoadedSectorCRCs: bool,
    pub bCheckSectorCRCs: bool,
    pub bIsWriteHandle: bool,
}
#[test]
fn bindgen_test_layout__TMPQFile() {
    assert_eq!(
        ::std::mem::size_of::<_TMPQFile>(),
        256usize,
        concat!("Size of: ", stringify!(_TMPQFile))
    );
    assert_eq!(
        ::std::mem::align_of::<_TMPQFile>(),
        8usize,
        concat!("Alignment of ", stringify!(_TMPQFile))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pStream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pStream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).ha as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(ha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pHashEntry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pHashEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pFileEntry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pFileEntry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).RawFilePos as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(RawFilePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).MpqFilePos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(MpqFilePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwHashIndex as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwHashIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwFileKey as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwFileKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwFilePos as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwFilePos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwMagic as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwMagic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).hfPatch as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(hfPatch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pPatchInfo as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pPatchInfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).SectorOffsets as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(SectorOffsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).SectorChksums as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(SectorChksums)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pbFileData as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pbFileData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).cbFileData as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(cbFileData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwCompression0 as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwCompression0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwSectorCount as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwSectorCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwPatchedFileSize as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwPatchedFileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwDataSize as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwDataSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).pbFileSector as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(pbFileSector)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwSectorOffs as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwSectorOffs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwSectorSize as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwSectorSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).hctx as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(hctx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).dwCrc32 as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(dwCrc32)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).nAddFileError as *const _ as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(nAddFileError)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).bLoadedSectorCRCs as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(bLoadedSectorCRCs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).bCheckSectorCRCs as *const _ as usize },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(bCheckSectorCRCs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_TMPQFile>())).bIsWriteHandle as *const _ as usize },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(_TMPQFile),
            "::",
            stringify!(bIsWriteHandle)
        )
    );
}
pub type TMPQFile = _TMPQFile;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _SFILE_FIND_DATA {
    pub cFileName: [::std::os::raw::c_char; 1024usize],
    pub szPlainName: *mut ::std::os::raw::c_char,
    pub dwHashIndex: DWORD,
    pub dwBlockIndex: DWORD,
    pub dwFileSize: DWORD,
    pub dwFileFlags: DWORD,
    pub dwCompSize: DWORD,
    pub dwFileTimeLo: DWORD,
    pub dwFileTimeHi: DWORD,
    pub lcLocale: LCID,
}
#[test]
fn bindgen_test_layout__SFILE_FIND_DATA() {
    assert_eq!(
        ::std::mem::size_of::<_SFILE_FIND_DATA>(),
        1064usize,
        concat!("Size of: ", stringify!(_SFILE_FIND_DATA))
    );
    assert_eq!(
        ::std::mem::align_of::<_SFILE_FIND_DATA>(),
        8usize,
        concat!("Alignment of ", stringify!(_SFILE_FIND_DATA))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).cFileName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(cFileName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).szPlainName as *const _ as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(szPlainName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwHashIndex as *const _ as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwHashIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwBlockIndex as *const _ as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwBlockIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwFileSize as *const _ as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwFileSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwFileFlags as *const _ as usize },
        1044usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwFileFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwCompSize as *const _ as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwCompSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwFileTimeLo as *const _ as usize },
        1052usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwFileTimeLo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).dwFileTimeHi as *const _ as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(dwFileTimeHi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_FIND_DATA>())).lcLocale as *const _ as usize },
        1060usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_FIND_DATA),
            "::",
            stringify!(lcLocale)
        )
    );
}
pub type SFILE_FIND_DATA = _SFILE_FIND_DATA;
pub type PSFILE_FIND_DATA = *mut _SFILE_FIND_DATA;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SFILE_CREATE_MPQ {
    pub cbSize: DWORD,
    pub dwMpqVersion: DWORD,
    pub pvUserData: *mut ::std::os::raw::c_void,
    pub cbUserData: DWORD,
    pub dwStreamFlags: DWORD,
    pub dwFileFlags1: DWORD,
    pub dwFileFlags2: DWORD,
    pub dwFileFlags3: DWORD,
    pub dwAttrFlags: DWORD,
    pub dwSectorSize: DWORD,
    pub dwRawChunkSize: DWORD,
    pub dwMaxFileCount: DWORD,
}
#[test]
fn bindgen_test_layout__SFILE_CREATE_MPQ() {
    assert_eq!(
        ::std::mem::size_of::<_SFILE_CREATE_MPQ>(),
        56usize,
        concat!("Size of: ", stringify!(_SFILE_CREATE_MPQ))
    );
    assert_eq!(
        ::std::mem::align_of::<_SFILE_CREATE_MPQ>(),
        8usize,
        concat!("Alignment of ", stringify!(_SFILE_CREATE_MPQ))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).cbSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(cbSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwMpqVersion as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwMpqVersion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).pvUserData as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(pvUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).cbUserData as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(cbUserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwStreamFlags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwStreamFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwFileFlags1 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwFileFlags1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwFileFlags2 as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwFileFlags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwFileFlags3 as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwFileFlags3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwAttrFlags as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwAttrFlags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwSectorSize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwSectorSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwRawChunkSize as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwRawChunkSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_SFILE_CREATE_MPQ>())).dwMaxFileCount as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_CREATE_MPQ),
            "::",
            stringify!(dwMaxFileCount)
        )
    );
}
pub type SFILE_CREATE_MPQ = _SFILE_CREATE_MPQ;
pub type PSFILE_CREATE_MPQ = *mut _SFILE_CREATE_MPQ;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SFILE_MARKERS {
    pub dwSize: DWORD,
    pub dwSignature: DWORD,
    pub szHashTableKey: *const ::std::os::raw::c_char,
    pub szBlockTableKey: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__SFILE_MARKERS() {
    assert_eq!(
        ::std::mem::size_of::<_SFILE_MARKERS>(),
        24usize,
        concat!("Size of: ", stringify!(_SFILE_MARKERS))
    );
    assert_eq!(
        ::std::mem::align_of::<_SFILE_MARKERS>(),
        8usize,
        concat!("Alignment of ", stringify!(_SFILE_MARKERS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_MARKERS>())).dwSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_MARKERS),
            "::",
            stringify!(dwSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_MARKERS>())).dwSignature as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_MARKERS),
            "::",
            stringify!(dwSignature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_MARKERS>())).szHashTableKey as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_MARKERS),
            "::",
            stringify!(szHashTableKey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SFILE_MARKERS>())).szBlockTableKey as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_SFILE_MARKERS),
            "::",
            stringify!(szBlockTableKey)
        )
    );
}
pub type SFILE_MARKERS = _SFILE_MARKERS;
pub type PSFILE_MARKERS = *mut _SFILE_MARKERS;
extern "C" {
    pub fn GetMPQBits(
        pBits: *mut TMPQBits,
        nBitPosition: ::std::os::raw::c_uint,
        nBitLength: ::std::os::raw::c_uint,
        pvBuffer: *mut ::std::os::raw::c_void,
        nResultByteSize: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TStreamBitmap {
    pub StreamSize: ULONGLONG,
    pub BitmapSize: DWORD,
    pub BlockCount: DWORD,
    pub BlockSize: DWORD,
    pub IsComplete: DWORD,
}
#[test]
fn bindgen_test_layout_TStreamBitmap() {
    assert_eq!(
        ::std::mem::size_of::<TStreamBitmap>(),
        24usize,
        concat!("Size of: ", stringify!(TStreamBitmap))
    );
    assert_eq!(
        ::std::mem::align_of::<TStreamBitmap>(),
        8usize,
        concat!("Alignment of ", stringify!(TStreamBitmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TStreamBitmap>())).StreamSize as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TStreamBitmap),
            "::",
            stringify!(StreamSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TStreamBitmap>())).BitmapSize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TStreamBitmap),
            "::",
            stringify!(BitmapSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TStreamBitmap>())).BlockCount as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TStreamBitmap),
            "::",
            stringify!(BlockCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TStreamBitmap>())).BlockSize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TStreamBitmap),
            "::",
            stringify!(BlockSize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TStreamBitmap>())).IsComplete as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TStreamBitmap),
            "::",
            stringify!(IsComplete)
        )
    );
}
extern "C" {
    pub fn FileStream_CreateFile(
        szFileName: *const TCHAR,
        dwStreamFlags: DWORD,
    ) -> *mut TFileStream;
}
extern "C" {
    pub fn FileStream_OpenFile(szFileName: *const TCHAR, dwStreamFlags: DWORD) -> *mut TFileStream;
}
extern "C" {
    pub fn FileStream_GetFileName(pStream: *mut TFileStream) -> *const TCHAR;
}
extern "C" {
    pub fn FileStream_Prefix(szFileName: *const TCHAR, pdwProvider: *mut DWORD) -> size_t;
}
extern "C" {
    pub fn FileStream_SetCallback(
        pStream: *mut TFileStream,
        pfnCallback: SFILE_DOWNLOAD_CALLBACK,
        pvUserData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn FileStream_GetBitmap(
        pStream: *mut TFileStream,
        pvBitmap: *mut ::std::os::raw::c_void,
        cbBitmap: DWORD,
        pcbLengthNeeded: *mut DWORD,
    ) -> bool;
}
extern "C" {
    pub fn FileStream_Read(
        pStream: *mut TFileStream,
        pByteOffset: *mut ULONGLONG,
        pvBuffer: *mut ::std::os::raw::c_void,
        dwBytesToRead: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn FileStream_Write(
        pStream: *mut TFileStream,
        pByteOffset: *mut ULONGLONG,
        pvBuffer: *const ::std::os::raw::c_void,
        dwBytesToWrite: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn FileStream_SetSize(pStream: *mut TFileStream, NewFileSize: ULONGLONG) -> bool;
}
extern "C" {
    pub fn FileStream_GetSize(pStream: *mut TFileStream, pFileSize: *mut ULONGLONG) -> bool;
}
extern "C" {
    pub fn FileStream_GetPos(pStream: *mut TFileStream, pByteOffset: *mut ULONGLONG) -> bool;
}
extern "C" {
    pub fn FileStream_GetTime(pStream: *mut TFileStream, pFT: *mut ULONGLONG) -> bool;
}
extern "C" {
    pub fn FileStream_GetFlags(pStream: *mut TFileStream, pdwStreamFlags: LPDWORD) -> bool;
}
extern "C" {
    pub fn FileStream_Replace(pStream: *mut TFileStream, pNewStream: *mut TFileStream) -> bool;
}
extern "C" {
    pub fn FileStream_Close(pStream: *mut TFileStream);
}
pub type SFILESETLOCALE = ::std::option::Option<unsafe extern "C" fn(arg1: LCID) -> LCID>;
pub type SFILEOPENARCHIVE = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_char,
        arg2: DWORD,
        arg3: DWORD,
        arg4: *mut HANDLE,
    ) -> bool,
>;
pub type SFILECLOSEARCHIVE = ::std::option::Option<unsafe extern "C" fn(arg1: HANDLE) -> bool>;
pub type SFILEOPENFILEEX = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: HANDLE,
        arg2: *const ::std::os::raw::c_char,
        arg3: DWORD,
        arg4: *mut HANDLE,
    ) -> bool,
>;
pub type SFILECLOSEFILE = ::std::option::Option<unsafe extern "C" fn(arg1: HANDLE) -> bool>;
pub type SFILEGETFILESIZE =
    ::std::option::Option<unsafe extern "C" fn(arg1: HANDLE, arg2: LPDWORD) -> DWORD>;
pub type SFILESETFILEPOINTER = ::std::option::Option<
    unsafe extern "C" fn(arg1: HANDLE, arg2: LONG, arg3: *mut LONG, arg4: DWORD) -> DWORD,
>;
pub type SFILEREADFILE = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: HANDLE,
        arg2: *mut ::std::os::raw::c_void,
        arg3: DWORD,
        arg4: LPDWORD,
        arg5: LPOVERLAPPED,
    ) -> bool,
>;
extern "C" {
    pub fn SFileSetArchiveMarkers(pMarkers: PSFILE_MARKERS) -> bool;
}
extern "C" {
    pub fn SFileGetLocale() -> LCID;
}
extern "C" {
    pub fn SFileSetLocale(lcNewLocale: LCID) -> LCID;
}
extern "C" {
    pub fn SFileOpenArchive(
        szMpqName: *const TCHAR,
        dwPriority: DWORD,
        dwFlags: DWORD,
        phMpq: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileCreateArchive(
        szMpqName: *const TCHAR,
        dwCreateFlags: DWORD,
        dwMaxFileCount: DWORD,
        phMpq: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileCreateArchive2(
        szMpqName: *const TCHAR,
        pCreateInfo: PSFILE_CREATE_MPQ,
        phMpq: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileSetDownloadCallback(
        hMpq: HANDLE,
        DownloadCB: SFILE_DOWNLOAD_CALLBACK,
        pvUserData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn SFileFlushArchive(hMpq: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileCloseArchive(hMpq: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileAddListFile(hMpq: HANDLE, szListFile: *const TCHAR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SFileSetCompactCallback(
        hMpq: HANDLE,
        CompactCB: SFILE_COMPACT_CALLBACK,
        pvUserData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn SFileCompactArchive(hMpq: HANDLE, szListFile: *const TCHAR, bReserved: bool) -> bool;
}
extern "C" {
    pub fn SFileGetMaxFileCount(hMpq: HANDLE) -> DWORD;
}
extern "C" {
    pub fn SFileSetMaxFileCount(hMpq: HANDLE, dwMaxFileCount: DWORD) -> bool;
}
extern "C" {
    pub fn SFileGetAttributes(hMpq: HANDLE) -> DWORD;
}
extern "C" {
    pub fn SFileSetAttributes(hMpq: HANDLE, dwFlags: DWORD) -> bool;
}
extern "C" {
    pub fn SFileUpdateFileAttributes(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn SFileOpenPatchArchive(
        hMpq: HANDLE,
        szPatchMpqName: *const TCHAR,
        szPatchPathPrefix: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileIsPatchedArchive(hMpq: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileHasFile(hMpq: HANDLE, szFileName: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn SFileOpenFileEx(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        dwSearchScope: DWORD,
        phFile: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileGetFileSize(hFile: HANDLE, pdwFileSizeHigh: LPDWORD) -> DWORD;
}
extern "C" {
    pub fn SFileSetFilePointer(
        hFile: HANDLE,
        lFilePos: LONG,
        plFilePosHigh: *mut LONG,
        dwMoveMethod: DWORD,
    ) -> DWORD;
}
extern "C" {
    pub fn SFileReadFile(
        hFile: HANDLE,
        lpBuffer: *mut ::std::os::raw::c_void,
        dwToRead: DWORD,
        pdwRead: LPDWORD,
        lpOverlapped: LPOVERLAPPED,
    ) -> bool;
}
extern "C" {
    pub fn SFileCloseFile(hFile: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileGetFileInfo(
        hMpqOrFile: HANDLE,
        InfoClass: SFileInfoClass,
        pvFileInfo: *mut ::std::os::raw::c_void,
        cbFileInfo: DWORD,
        pcbLengthNeeded: LPDWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileGetFileName(hFile: HANDLE, szFileName: *mut ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn SFileFreeFileInfo(
        pvFileInfo: *mut ::std::os::raw::c_void,
        InfoClass: SFileInfoClass,
    ) -> bool;
}
extern "C" {
    pub fn SFileExtractFile(
        hMpq: HANDLE,
        szToExtract: *const ::std::os::raw::c_char,
        szExtracted: *const TCHAR,
        dwSearchScope: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileGetFileChecksums(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        pdwCrc32: LPDWORD,
        pMD5: *mut ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn SFileVerifyFile(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
    ) -> DWORD;
}
extern "C" {
    pub fn SFileVerifyRawData(
        hMpq: HANDLE,
        dwWhatToVerify: DWORD,
        szFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SFileSignArchive(hMpq: HANDLE, dwSignatureType: DWORD) -> bool;
}
extern "C" {
    pub fn SFileVerifyArchive(hMpq: HANDLE) -> DWORD;
}
extern "C" {
    pub fn SFileFindFirstFile(
        hMpq: HANDLE,
        szMask: *const ::std::os::raw::c_char,
        lpFindFileData: *mut SFILE_FIND_DATA,
        szListFile: *const TCHAR,
    ) -> HANDLE;
}
extern "C" {
    pub fn SFileFindNextFile(hFind: HANDLE, lpFindFileData: *mut SFILE_FIND_DATA) -> bool;
}
extern "C" {
    pub fn SFileFindClose(hFind: HANDLE) -> bool;
}
extern "C" {
    pub fn SListFileFindFirstFile(
        hMpq: HANDLE,
        szListFile: *const TCHAR,
        szMask: *const ::std::os::raw::c_char,
        lpFindFileData: *mut SFILE_FIND_DATA,
    ) -> HANDLE;
}
extern "C" {
    pub fn SListFileFindNextFile(hFind: HANDLE, lpFindFileData: *mut SFILE_FIND_DATA) -> bool;
}
extern "C" {
    pub fn SListFileFindClose(hFind: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileEnumLocales(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        plcLocales: *mut LCID,
        pdwMaxLocales: LPDWORD,
        dwSearchScope: DWORD,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SFileCreateFile(
        hMpq: HANDLE,
        szArchivedName: *const ::std::os::raw::c_char,
        FileTime: ULONGLONG,
        dwFileSize: DWORD,
        lcLocale: LCID,
        dwFlags: DWORD,
        phFile: *mut HANDLE,
    ) -> bool;
}
extern "C" {
    pub fn SFileWriteFile(
        hFile: HANDLE,
        pvData: *const ::std::os::raw::c_void,
        dwSize: DWORD,
        dwCompression: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileFinishFile(hFile: HANDLE) -> bool;
}
extern "C" {
    pub fn SFileAddFileEx(
        hMpq: HANDLE,
        szFileName: *const TCHAR,
        szArchivedName: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
        dwCompression: DWORD,
        dwCompressionNext: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileAddFile(
        hMpq: HANDLE,
        szFileName: *const TCHAR,
        szArchivedName: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileAddWave(
        hMpq: HANDLE,
        szFileName: *const TCHAR,
        szArchivedName: *const ::std::os::raw::c_char,
        dwFlags: DWORD,
        dwQuality: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileRemoveFile(
        hMpq: HANDLE,
        szFileName: *const ::std::os::raw::c_char,
        dwSearchScope: DWORD,
    ) -> bool;
}
extern "C" {
    pub fn SFileRenameFile(
        hMpq: HANDLE,
        szOldFileName: *const ::std::os::raw::c_char,
        szNewFileName: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn SFileSetFileLocale(hFile: HANDLE, lcNewLocale: LCID) -> bool;
}
extern "C" {
    pub fn SFileSetDataCompression(DataCompression: DWORD) -> bool;
}
extern "C" {
    pub fn SFileSetAddFileCallback(
        hMpq: HANDLE,
        AddFileCB: SFILE_ADDFILE_CALLBACK,
        pvUserData: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn SCompImplode(
        pvOutBuffer: *mut ::std::os::raw::c_void,
        pcbOutBuffer: *mut ::std::os::raw::c_int,
        pvInBuffer: *mut ::std::os::raw::c_void,
        cbInBuffer: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SCompExplode(
        pvOutBuffer: *mut ::std::os::raw::c_void,
        pcbOutBuffer: *mut ::std::os::raw::c_int,
        pvInBuffer: *mut ::std::os::raw::c_void,
        cbInBuffer: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SCompCompress(
        pvOutBuffer: *mut ::std::os::raw::c_void,
        pcbOutBuffer: *mut ::std::os::raw::c_int,
        pvInBuffer: *mut ::std::os::raw::c_void,
        cbInBuffer: ::std::os::raw::c_int,
        uCompressionMask: ::std::os::raw::c_uint,
        nCmpType: ::std::os::raw::c_int,
        nCmpLevel: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SCompDecompress(
        pvOutBuffer: *mut ::std::os::raw::c_void,
        pcbOutBuffer: *mut ::std::os::raw::c_int,
        pvInBuffer: *mut ::std::os::raw::c_void,
        cbInBuffer: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SCompDecompress2(
        pvOutBuffer: *mut ::std::os::raw::c_void,
        pcbOutBuffer: *mut ::std::os::raw::c_int,
        pvInBuffer: *mut ::std::os::raw::c_void,
        cbInBuffer: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SetLastError(dwErrCode: DWORD);
}
extern "C" {
    pub fn GetLastError() -> DWORD;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
